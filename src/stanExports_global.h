// Generated by rstantools.  Do not edit by hand.

/*
    tipsae is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    tipsae is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with tipsae.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_global_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 616> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 86, column 0 to column 35)",
  " (in 'string', line 87, column 0 to column 17)",
  " (in 'string', line 89, column 2 to column 52)",
  " (in 'string', line 90, column 2 to column 49)",
  " (in 'string', line 91, column 2 to column 50)",
  " (in 'string', line 94, column 0 to column 23)",
  " (in 'string', line 96, column 4 to column 96)",
  " (in 'string', line 98, column 4 to column 72)",
  " (in 'string', line 100, column 4 to column 82)",
  " (in 'string', line 101, column 4 to column 76)",
  " (in 'string', line 104, column 0 to column 35)",
  " (in 'string', line 105, column 0 to column 46)",
  " (in 'string', line 107, column 0 to column 61)",
  " (in 'string', line 108, column 0 to column 47)",
  " (in 'string', line 112, column 0 to column 55)",
  " (in 'string', line 113, column 0 to column 55)",
  " (in 'string', line 115, column 0 to column 57)",
  " (in 'string', line 116, column 0 to column 57)",
  " (in 'string', line 117, column 0 to column 74)",
  " (in 'string', line 118, column 0 to column 74)",
  " (in 'string', line 123, column 0 to column 15)",
  " (in 'string', line 125, column 2 to column 44)",
  " (in 'string', line 126, column 2 to column 43)",
  " (in 'string', line 127, column 2 to column 53)",
  " (in 'string', line 130, column 0 to column 37)",
  " (in 'string', line 134, column 0 to column 25)",
  " (in 'string', line 135, column 0 to column 25)",
  " (in 'string', line 136, column 0 to column 34)",
  " (in 'string', line 139, column 0 to column 44)",
  " (in 'string', line 140, column 0 to column 57)",
  " (in 'string', line 141, column 0 to column 57)",
  " (in 'string', line 142, column 0 to column 43)",
  " (in 'string', line 143, column 0 to column 43)",
  " (in 'string', line 146, column 0 to column 71)",
  " (in 'string', line 147, column 0 to column 71)",
  " (in 'string', line 150, column 0 to column 19)",
  " (in 'string', line 151, column 0 to column 32)",
  " (in 'string', line 152, column 0 to column 57)",
  " (in 'string', line 154, column 0 to column 19)",
  " (in 'string', line 156, column 0 to column 25)",
  " (in 'string', line 515, column 2 to column 23)",
  " (in 'string', line 516, column 2 to column 21)",
  " (in 'string', line 517, column 2 to column 24)",
  " (in 'string', line 518, column 2 to column 22)",
  " (in 'string', line 519, column 2 to column 17)",
  " (in 'string', line 520, column 2 to column 37)",
  " (in 'string', line 521, column 2 to column 64)",
  " (in 'string', line 163, column 4 to column 29)",
  " (in 'string', line 164, column 4 to column 34)",
  " (in 'string', line 165, column 4 to column 99)",
  " (in 'string', line 166, column 4 to column 43)",
  " (in 'string', line 162, column 28 to line 167, column 3)",
  " (in 'string', line 162, column 8 to line 167, column 3)",
  " (in 'string', line 161, column 4 to column 18)",
  " (in 'string', line 160, column 21 to line 162, column 3)",
  " (in 'string', line 160, column 2 to line 167, column 3)",
  " (in 'string', line 175, column 6 to column 43)",
  " (in 'string', line 174, column 27 to line 176, column 5)",
  " (in 'string', line 174, column 10 to line 176, column 5)",
  " (in 'string', line 173, column 6 to column 29)",
  " (in 'string', line 172, column 27 to line 174, column 5)",
  " (in 'string', line 172, column 10 to line 176, column 5)",
  " (in 'string', line 171, column 6 to column 29)",
  " (in 'string', line 170, column 21 to line 172, column 5)",
  " (in 'string', line 170, column 4 to line 176, column 5)",
  " (in 'string', line 169, column 26 to line 177, column 3)",
  " (in 'string', line 169, column 2 to line 177, column 3)",
  " (in 'string', line 188, column 6 to column 66)",
  " (in 'string', line 187, column 17 to line 189, column 5)",
  " (in 'string', line 187, column 4 to line 189, column 5)",
  " (in 'string', line 191, column 6 to column 41)",
  " (in 'string', line 190, column 20 to line 192, column 5)",
  " (in 'string', line 190, column 4 to line 192, column 5)",
  " (in 'string', line 194, column 6 to column 39)",
  " (in 'string', line 193, column 21 to line 195, column 5)",
  " (in 'string', line 193, column 4 to line 195, column 5)",
  " (in 'string', line 186, column 40 to line 196, column 3)",
  " (in 'string', line 186, column 2 to line 196, column 3)",
  " (in 'string', line 198, column 4 to column 46)",
  " (in 'string', line 200, column 6 to line 201, column 74)",
  " (in 'string', line 199, column 21 to line 202, column 5)",
  " (in 'string', line 199, column 4 to line 202, column 5)",
  " (in 'string', line 205, column 8 to column 25)",
  " (in 'string', line 204, column 26 to line 206, column 7)",
  " (in 'string', line 204, column 6 to line 206, column 7)",
  " (in 'string', line 208, column 6 to column 56)",
  " (in 'string', line 207, column 26 to line 209, column 7)",
  " (in 'string', line 207, column 6 to line 209, column 7)",
  " (in 'string', line 211, column 8 to line 212, column 78)",
  " (in 'string', line 210, column 26 to line 213, column 7)",
  " (in 'string', line 210, column 6 to line 213, column 7)",
  " (in 'string', line 203, column 22 to line 214, column 5)",
  " (in 'string', line 203, column 4 to line 214, column 5)",
  " (in 'string', line 197, column 39 to line 215, column 3)",
  " (in 'string', line 197, column 2 to line 215, column 3)",
  " (in 'string', line 217, column 4 to column 46)",
  " (in 'string', line 219, column 6 to column 80)",
  " (in 'string', line 218, column 17 to line 220, column 5)",
  " (in 'string', line 218, column 4 to line 220, column 5)",
  " (in 'string', line 222, column 6 to line 223, column 74)",
  " (in 'string', line 221, column 21 to line 224, column 5)",
  " (in 'string', line 221, column 4 to line 224, column 5)",
  " (in 'string', line 227, column 8 to line 228, column 76)",
  " (in 'string', line 226, column 26 to line 229, column 7)",
  " (in 'string', line 226, column 6 to line 229, column 7)",
  " (in 'string', line 231, column 8 to line 232, column 76)",
  " (in 'string', line 230, column 26 to line 233, column 7)",
  " (in 'string', line 230, column 6 to line 233, column 7)",
  " (in 'string', line 235, column 8 to line 236, column 78)",
  " (in 'string', line 234, column 26 to line 237, column 7)",
  " (in 'string', line 234, column 6 to line 237, column 7)",
  " (in 'string', line 225, column 22 to line 238, column 5)",
  " (in 'string', line 225, column 4 to line 238, column 5)",
  " (in 'string', line 216, column 39 to line 239, column 3)",
  " (in 'string', line 216, column 2 to line 239, column 3)",
  " (in 'string', line 185, column 5 to line 242, column 1)",
  " (in 'string', line 181, column 2 to column 12)",
  " (in 'string', line 183, column 6 to column 23)",
  " (in 'string', line 182, column 19 to line 184, column 5)",
  " (in 'string', line 182, column 2 to line 184, column 5)",
  " (in 'string', line 180, column 42 to line 185, column 1)",
  " (in 'string', line 180, column 0 to line 242, column 1)",
  " (in 'string', line 388, column 4 to column 59)",
  " (in 'string', line 387, column 7 to line 389, column 3)",
  " (in 'string', line 386, column 4 to column 48)",
  " (in 'string', line 385, column 21 to line 387, column 3)",
  " (in 'string', line 385, column 2 to line 389, column 3)",
  " (in 'string', line 390, column 2 to column 50)",
  " (in 'string', line 396, column 6 to column 36)",
  " (in 'string', line 397, column 6 to column 30)",
  " (in 'string', line 395, column 11 to line 398, column 3)",
  " (in 'string', line 393, column 6 to column 64)",
  " (in 'string', line 394, column 6 to column 58)",
  " (in 'string', line 392, column 13 to line 395, column 5)",
  " (in 'string', line 392, column 0 to line 398, column 3)",
  " (in 'string', line 384, column 17 to line 401, column 1)",
  " (in 'string', line 384, column 0 to line 401, column 1)",
  " (in 'string', line 372, column 25 to line 402, column 3)",
  " (in 'string', line 372, column 8 to line 402, column 3)",
  " (in 'string', line 338, column 4 to column 59)",
  " (in 'string', line 337, column 7 to line 339, column 3)",
  " (in 'string', line 336, column 4 to column 48)",
  " (in 'string', line 335, column 21 to line 337, column 3)",
  " (in 'string', line 335, column 2 to line 339, column 3)",
  " (in 'string', line 344, column 6 to column 58)",
  " (in 'string', line 343, column 9 to line 345, column 5)",
  " (in 'string', line 342, column 6 to column 43)",
  " (in 'string', line 341, column 23 to line 343, column 5)",
  " (in 'string', line 341, column 4 to line 345, column 5)",
  " (in 'string', line 340, column 21 to line 346, column 3)",
  " (in 'string', line 340, column 2 to line 346, column 3)",
  " (in 'string', line 351, column 6 to column 58)",
  " (in 'string', line 350, column 9 to line 352, column 5)",
  " (in 'string', line 349, column 6 to column 43)",
  " (in 'string', line 348, column 23 to line 350, column 5)",
  " (in 'string', line 348, column 4 to line 352, column 5)",
  " (in 'string', line 347, column 21 to line 353, column 3)",
  " (in 'string', line 347, column 2 to line 353, column 3)",
  " (in 'string', line 359, column 4 to column 51)",
  " (in 'string', line 358, column 27 to line 360, column 3)",
  " (in 'string', line 358, column 8 to line 360, column 3)",
  " (in 'string', line 357, column 4 to column 43)",
  " (in 'string', line 356, column 27 to line 358, column 3)",
  " (in 'string', line 356, column 8 to line 360, column 3)",
  " (in 'string', line 355, column 4 to column 35)",
  " (in 'string', line 354, column 21 to line 356, column 3)",
  " (in 'string', line 354, column 2 to line 360, column 3)",
  " (in 'string', line 366, column 6 to column 36)",
  " (in 'string', line 367, column 6 to column 30)",
  " (in 'string', line 365, column 11 to line 368, column 3)",
  " (in 'string', line 363, column 6 to column 64)",
  " (in 'string', line 364, column 6 to column 58)",
  " (in 'string', line 362, column 13 to line 365, column 5)",
  " (in 'string', line 362, column 0 to line 368, column 3)",
  " (in 'string', line 334, column 17 to line 371, column 1)",
  " (in 'string', line 334, column 0 to line 371, column 1)",
  " (in 'string', line 297, column 25 to line 372, column 3)",
  " (in 'string', line 297, column 8 to line 402, column 3)",
  " (in 'string', line 283, column 4 to column 64)",
  " (in 'string', line 282, column 7 to line 284, column 3)",
  " (in 'string', line 281, column 4 to column 53)",
  " (in 'string', line 280, column 20 to line 282, column 3)",
  " (in 'string', line 280, column 2 to line 284, column 3)",
  " (in 'string', line 285, column 2 to column 100)",
  " (in 'string', line 286, column 2 to column 54)",
  " (in 'string', line 287, column 2 to column 19)",
  " (in 'string', line 288, column 2 to line 290, column 74)",
  " (in 'string', line 291, column 2 to column 38)",
  " (in 'string', line 292, column 2 to column 32)",
  " (in 'string', line 293, column 2 to column 38)",
  " (in 'string', line 294, column 2 to column 32)",
  " (in 'string', line 279, column 17 to line 295, column 1)",
  " (in 'string', line 279, column 0 to line 295, column 1)",
  " (in 'string', line 275, column 25 to line 297, column 3)",
  " (in 'string', line 275, column 8 to line 402, column 3)",
  " (in 'string', line 260, column 4 to column 59)",
  " (in 'string', line 259, column 7 to line 261, column 3)",
  " (in 'string', line 258, column 4 to column 48)",
  " (in 'string', line 257, column 21 to line 259, column 3)",
  " (in 'string', line 257, column 2 to line 261, column 3)",
  " (in 'string', line 262, column 2 to column 19)",
  " (in 'string', line 269, column 6 to column 36)",
  " (in 'string', line 270, column 6 to column 30)",
  " (in 'string', line 268, column 11 to line 271, column 3)",
  " (in 'string', line 266, column 6 to column 64)",
  " (in 'string', line 267, column 6 to column 58)",
  " (in 'string', line 265, column 13 to line 268, column 5)",
  " (in 'string', line 265, column 0 to line 271, column 3)",
  " (in 'string', line 256, column 17 to line 274, column 1)",
  " (in 'string', line 256, column 0 to line 274, column 1)",
  " (in 'string', line 244, column 19 to line 275, column 3)",
  " (in 'string', line 244, column 2 to line 402, column 3)",
  " (in 'string', line 664, column 6 to column 19)",
  " (in 'string', line 663, column 7 to line 665, column 5)",
  " (in 'string', line 660, column 6 to column 37)",
  " (in 'string', line 661, column 6 to column 59)",
  " (in 'string', line 659, column 30 to line 662, column 5)",
  " (in 'string', line 659, column 10 to line 662, column 5)",
  " (in 'string', line 658, column 6 to column 53)",
  " (in 'string', line 657, column 30 to line 659, column 5)",
  " (in 'string', line 657, column 10 to line 662, column 5)",
  " (in 'string', line 656, column 6 to column 43)",
  " (in 'string', line 655, column 24 to line 657, column 5)",
  " (in 'string', line 655, column 4 to line 662, column 5)",
  " (in 'string', line 654, column 23 to line 663, column 3)",
  " (in 'string', line 654, column 2 to line 665, column 5)",
  " (in 'string', line 669, column 4 to column 85)",
  " (in 'string', line 668, column 7 to line 670, column 3)",
  " (in 'string', line 667, column 4 to column 74)",
  " (in 'string', line 666, column 21 to line 668, column 3)",
  " (in 'string', line 666, column 2 to line 670, column 3)",
  " (in 'string', line 652, column 18 to line 671, column 1)",
  " (in 'string', line 652, column 0 to line 671, column 1)",
  " (in 'string', line 676, column 4 to column 81)",
  " (in 'string', line 675, column 7 to line 677, column 3)",
  " (in 'string', line 674, column 4 to column 41)",
  " (in 'string', line 673, column 15 to line 675, column 3)",
  " (in 'string', line 673, column 2 to line 677, column 3)",
  " (in 'string', line 678, column 2 to column 36)",
  " (in 'string', line 672, column 18 to line 679, column 1)",
  " (in 'string', line 672, column 0 to line 679, column 1)",
  " (in 'string', line 681, column 2 to column 53)",
  " (in 'string', line 685, column 4 to column 38)",
  " (in 'string', line 684, column 7 to line 686, column 3)",
  " (in 'string', line 683, column 4 to column 19)",
  " (in 'string', line 682, column 22 to line 684, column 3)",
  " (in 'string', line 682, column 2 to line 686, column 3)",
  " (in 'string', line 680, column 18 to line 687, column 1)",
  " (in 'string', line 680, column 0 to line 687, column 1)",
  " (in 'string', line 650, column 26 to line 688, column 3)",
  " (in 'string', line 650, column 8 to line 688, column 3)",
  " (in 'string', line 575, column 6 to column 19)",
  " (in 'string', line 574, column 7 to line 576, column 5)",
  " (in 'string', line 571, column 6 to column 37)",
  " (in 'string', line 572, column 6 to column 59)",
  " (in 'string', line 570, column 30 to line 573, column 5)",
  " (in 'string', line 570, column 10 to line 573, column 5)",
  " (in 'string', line 569, column 6 to column 53)",
  " (in 'string', line 568, column 30 to line 570, column 5)",
  " (in 'string', line 568, column 10 to line 573, column 5)",
  " (in 'string', line 567, column 6 to column 43)",
  " (in 'string', line 566, column 24 to line 568, column 5)",
  " (in 'string', line 566, column 4 to line 573, column 5)",
  " (in 'string', line 565, column 23 to line 574, column 3)",
  " (in 'string', line 565, column 2 to line 576, column 5)",
  " (in 'string', line 601, column 6 to line 604, column 56)",
  " (in 'string', line 600, column 9 to line 605, column 5)",
  " (in 'string', line 597, column 6 to line 599, column 41)",
  " (in 'string', line 596, column 23 to line 600, column 5)",
  " (in 'string', line 596, column 4 to line 605, column 5)",
  " (in 'string', line 595, column 27 to line 606, column 3)",
  " (in 'string', line 595, column 8 to line 606, column 3)",
  " (in 'string', line 591, column 6 to line 593, column 56)",
  " (in 'string', line 590, column 9 to line 594, column 5)",
  " (in 'string', line 587, column 6 to line 589, column 41)",
  " (in 'string', line 586, column 23 to line 590, column 5)",
  " (in 'string', line 586, column 4 to line 594, column 5)",
  " (in 'string', line 585, column 27 to line 595, column 3)",
  " (in 'string', line 585, column 8 to line 606, column 3)",
  " (in 'string', line 582, column 6 to line 583, column 74)",
  " (in 'string', line 581, column 9 to line 584, column 5)",
  " (in 'string', line 579, column 6 to line 580, column 63)",
  " (in 'string', line 578, column 23 to line 581, column 5)",
  " (in 'string', line 578, column 4 to line 584, column 5)",
  " (in 'string', line 577, column 22 to line 585, column 3)",
  " (in 'string', line 577, column 3 to line 606, column 3)",
  " (in 'string', line 563, column 18 to line 607, column 1)",
  " (in 'string', line 563, column 0 to line 607, column 1)",
  " (in 'string', line 619, column 6 to column 75)",
  " (in 'string', line 618, column 29 to line 620, column 5)",
  " (in 'string', line 618, column 10 to line 620, column 5)",
  " (in 'string', line 617, column 6 to column 67)",
  " (in 'string', line 616, column 29 to line 618, column 5)",
  " (in 'string', line 616, column 10 to line 620, column 5)",
  " (in 'string', line 615, column 6 to column 67)",
  " (in 'string', line 614, column 23 to line 616, column 5)",
  " (in 'string', line 614, column 4 to line 620, column 5)",
  " (in 'string', line 613, column 7 to line 621, column 3)",
  " (in 'string', line 612, column 4 to column 28)",
  " (in 'string', line 611, column 40 to line 613, column 3)",
  " (in 'string', line 611, column 8 to line 621, column 3)",
  " (in 'string', line 610, column 4 to column 28)",
  " (in 'string', line 609, column 34 to line 611, column 3)",
  " (in 'string', line 609, column 2 to line 621, column 3)",
  " (in 'string', line 637, column 4 to column 21)",
  " (in 'string', line 638, column 4 to column 33)",
  " (in 'string', line 639, column 4 to column 21)",
  " (in 'string', line 640, column 4 to column 40)",
  " (in 'string', line 646, column 6 to column 19)",
  " (in 'string', line 645, column 30 to line 647, column 5)",
  " (in 'string', line 645, column 10 to line 647, column 5)",
  " (in 'string', line 644, column 6 to column 40)",
  " (in 'string', line 643, column 30 to line 645, column 5)",
  " (in 'string', line 643, column 10 to line 647, column 5)",
  " (in 'string', line 642, column 6 to column 19)",
  " (in 'string', line 641, column 24 to line 643, column 5)",
  " (in 'string', line 641, column 4 to line 647, column 5)",
  " (in 'string', line 636, column 27 to line 648, column 3)",
  " (in 'string', line 636, column 8 to line 648, column 3)",
  " (in 'string', line 630, column 4 to column 38)",
  " (in 'string', line 634, column 6 to column 40)",
  " (in 'string', line 633, column 9 to line 635, column 5)",
  " (in 'string', line 632, column 6 to column 19)",
  " (in 'string', line 631, column 24 to line 633, column 5)",
  " (in 'string', line 631, column 4 to line 635, column 5)",
  " (in 'string', line 629, column 27 to line 636, column 3)",
  " (in 'string', line 629, column 8 to line 648, column 3)",
  " (in 'string', line 623, column 4 to column 38)",
  " (in 'string', line 627, column 6 to column 40)",
  " (in 'string', line 626, column 9 to line 628, column 5)",
  " (in 'string', line 625, column 6 to column 19)",
  " (in 'string', line 624, column 24 to line 626, column 5)",
  " (in 'string', line 624, column 4 to line 628, column 5)",
  " (in 'string', line 622, column 21 to line 629, column 3)",
  " (in 'string', line 622, column 2 to line 648, column 3)",
  " (in 'string', line 608, column 17 to line 649, column 1)",
  " (in 'string', line 608, column 0 to line 649, column 1)",
  " (in 'string', line 561, column 28 to line 650, column 3)",
  " (in 'string', line 561, column 8 to line 688, column 3)",
  " (in 'string', line 552, column 2 to line 553, column 38)",
  " (in 'string', line 554, column 2 to column 35)",
  " (in 'string', line 558, column 4 to column 38)",
  " (in 'string', line 557, column 7 to line 559, column 3)",
  " (in 'string', line 556, column 4 to column 38)",
  " (in 'string', line 555, column 21 to line 557, column 3)",
  " (in 'string', line 555, column 2 to line 559, column 3)",
  " (in 'string', line 551, column 18 to line 560, column 1)",
  " (in 'string', line 551, column 0 to line 560, column 1)",
  " (in 'string', line 549, column 27 to line 561, column 3)",
  " (in 'string', line 549, column 8 to line 688, column 3)",
  " (in 'string', line 525, column 6 to column 50)",
  " (in 'string', line 526, column 6 to column 40)",
  " (in 'string', line 524, column 22 to line 527, column 5)",
  " (in 'string', line 524, column 4 to line 527, column 5)",
  " (in 'string', line 541, column 6 to column 19)",
  " (in 'string', line 540, column 7 to line 542, column 5)",
  " (in 'string', line 537, column 6 to column 37)",
  " (in 'string', line 538, column 6 to column 59)",
  " (in 'string', line 536, column 30 to line 539, column 5)",
  " (in 'string', line 536, column 10 to line 539, column 5)",
  " (in 'string', line 535, column 6 to column 53)",
  " (in 'string', line 534, column 30 to line 536, column 5)",
  " (in 'string', line 534, column 10 to line 539, column 5)",
  " (in 'string', line 533, column 6 to column 43)",
  " (in 'string', line 532, column 24 to line 534, column 5)",
  " (in 'string', line 532, column 4 to line 539, column 5)",
  " (in 'string', line 531, column 23 to line 540, column 3)",
  " (in 'string', line 531, column 2 to line 542, column 5)",
  " (in 'string', line 546, column 8 to column 89)",
  " (in 'string', line 545, column 11 to line 547, column 7)",
  " (in 'string', line 544, column 8 to column 77)",
  " (in 'string', line 543, column 25 to line 545, column 7)",
  " (in 'string', line 543, column 6 to line 547, column 7)",
  " (in 'string', line 529, column 22 to line 548, column 5)",
  " (in 'string', line 529, column 4 to line 548, column 5)",
  " (in 'string', line 523, column 22 to line 549, column 3)",
  " (in 'string', line 523, column 2 to line 688, column 3)",
  " (in 'string', line 406, column 2 to column 10)",
  " (in 'string', line 407, column 2 to column 10)",
  " (in 'string', line 410, column 4 to column 38)",
  " (in 'string', line 409, column 19 to line 411, column 3)",
  " (in 'string', line 409, column 2 to line 411, column 3)",
  " (in 'string', line 415, column 4 to column 25)",
  " (in 'string', line 416, column 4 to column 29)",
  " (in 'string', line 417, column 4 to column 28)",
  " (in 'string', line 418, column 4 to column 42)",
  " (in 'string', line 414, column 30 to line 419, column 3)",
  " (in 'string', line 414, column 8 to line 419, column 3)",
  " (in 'string', line 413, column 4 to column 36)",
  " (in 'string', line 412, column 22 to line 414, column 3)",
  " (in 'string', line 412, column 2 to line 419, column 3)",
  " (in 'string', line 430, column 6 to column 27)",
  " (in 'string', line 431, column 6 to column 28)",
  " (in 'string', line 432, column 6 to column 41)",
  " (in 'string', line 429, column 30 to line 433, column 5)",
  " (in 'string', line 429, column 10 to line 433, column 5)",
  " (in 'string', line 426, column 6 to column 37)",
  " (in 'string', line 427, column 6 to column 48)",
  " (in 'string', line 427, column 43 to column 44)",
  " (in 'string', line 428, column 6 to column 31)",
  " (in 'string', line 425, column 30 to line 429, column 5)",
  " (in 'string', line 425, column 10 to line 433, column 5)",
  " (in 'string', line 423, column 6 to column 27)",
  " (in 'string', line 424, column 6 to column 48)",
  " (in 'string', line 424, column 43 to column 44)",
  " (in 'string', line 422, column 24 to line 425, column 5)",
  " (in 'string', line 422, column 4 to line 433, column 5)",
  " (in 'string', line 421, column 26 to line 434, column 3)",
  " (in 'string', line 421, column 2 to line 434, column 3)",
  " (in 'string', line 437, column 4 to column 38)",
  " (in 'string', line 437, column 33 to column 34)",
  " (in 'string', line 440, column 9 to column 54)",
  " (in 'string', line 439, column 23 to line 441, column 7)",
  " (in 'string', line 439, column 6 to line 441, column 7)",
  " (in 'string', line 443, column 8 to column 73)",
  " (in 'string', line 442, column 23 to line 444, column 7)",
  " (in 'string', line 442, column 6 to line 444, column 7)",
  " (in 'string', line 445, column 4 to column 25)",
  " (in 'string', line 438, column 24 to line 446, column 5)",
  " (in 'string', line 438, column 4 to line 446, column 5)",
  " (in 'string', line 447, column 4 to column 60)",
  " (in 'string', line 436, column 23 to line 448, column 3)",
  " (in 'string', line 436, column 2 to line 448, column 3)",
  " (in 'string', line 451, column 5 to column 39)",
  " (in 'string', line 451, column 34 to column 35)",
  " (in 'string', line 453, column 8 to column 49)",
  " (in 'string', line 454, column 8 to column 73)",
  " (in 'string', line 452, column 20 to line 455, column 6)",
  " (in 'string', line 452, column 5 to line 455, column 6)",
  " (in 'string', line 450, column 24 to line 456, column 3)",
  " (in 'string', line 450, column 2 to line 456, column 3)",
  " (in 'string', line 459, column 4 to column 22)",
  " (in 'string', line 460, column 4 to column 33)",
  " (in 'string', line 458, column 22 to line 461, column 3)",
  " (in 'string', line 458, column 2 to line 461, column 3)",
  " (in 'string', line 464, column 6 to column 32)",
  " (in 'string', line 466, column 8 to column 38)",
  " (in 'string', line 465, column 25 to line 467, column 7)",
  " (in 'string', line 465, column 6 to line 467, column 7)",
  " (in 'string', line 463, column 23 to line 468, column 5)",
  " (in 'string', line 463, column 4 to line 468, column 5)",
  " (in 'string', line 470, column 6 to column 32)",
  " (in 'string', line 472, column 8 to column 38)",
  " (in 'string', line 471, column 25 to line 473, column 7)",
  " (in 'string', line 471, column 6 to line 473, column 7)",
  " (in 'string', line 469, column 23 to line 474, column 5)",
  " (in 'string', line 469, column 4 to line 474, column 5)",
  " (in 'string', line 462, column 22 to line 475, column 3)",
  " (in 'string', line 462, column 2 to line 475, column 3)",
  " (in 'string', line 508, column 8 to line 509, column 41)",
  " (in 'string', line 507, column 11 to line 510, column 7)",
  " (in 'string', line 506, column 8 to column 42)",
  " (in 'string', line 505, column 20 to line 507, column 7)",
  " (in 'string', line 505, column 6 to line 510, column 7)",
  " (in 'string', line 504, column 22 to line 511, column 5)",
  " (in 'string', line 504, column 4 to line 511, column 5)",
  " (in 'string', line 503, column 28 to line 512, column 3)",
  " (in 'string', line 503, column 8 to line 512, column 3)",
  " (in 'string', line 493, column 8 to column 49)",
  " (in 'string', line 499, column 10 to column 43)",
  " (in 'string', line 498, column 33 to line 500, column 9)",
  " (in 'string', line 498, column 14 to line 500, column 9)",
  " (in 'string', line 497, column 10 to column 35)",
  " (in 'string', line 496, column 33 to line 498, column 9)",
  " (in 'string', line 496, column 14 to line 500, column 9)",
  " (in 'string', line 495, column 10 to column 35)",
  " (in 'string', line 494, column 27 to line 496, column 9)",
  " (in 'string', line 494, column 8 to line 500, column 9)",
  " (in 'string', line 492, column 11 to line 501, column 7)",
  " (in 'string', line 491, column 8 to column 29)",
  " (in 'string', line 490, column 44 to line 492, column 7)",
  " (in 'string', line 490, column 12 to line 501, column 7)",
  " (in 'string', line 489, column 8 to column 29)",
  " (in 'string', line 488, column 38 to line 490, column 7)",
  " (in 'string', line 488, column 6 to line 501, column 7)",
  " (in 'string', line 487, column 22 to line 502, column 5)",
  " (in 'string', line 487, column 4 to line 502, column 5)",
  " (in 'string', line 486, column 28 to line 503, column 3)",
  " (in 'string', line 486, column 8 to line 512, column 3)",
  " (in 'string', line 483, column 6 to line 484, column 40)",
  " (in 'string', line 482, column 22 to line 485, column 5)",
  " (in 'string', line 482, column 4 to line 485, column 5)",
  " (in 'string', line 481, column 26 to line 486, column 3)",
  " (in 'string', line 481, column 8 to line 512, column 3)",
  " (in 'string', line 479, column 6 to column 47)",
  " (in 'string', line 478, column 22 to line 480, column 5)",
  " (in 'string', line 478, column 4 to line 480, column 5)",
  " (in 'string', line 477, column 22 to line 481, column 3)",
  " (in 'string', line 477, column 2 to line 512, column 3)",
  " (in 'string', line 4, column 0 to column 32)",
  " (in 'string', line 5, column 0 to column 27)",
  " (in 'string', line 6, column 0 to column 33)",
  " (in 'string', line 7, column 0 to column 34)",
  " (in 'string', line 8, column 0 to column 33)",
  " (in 'string', line 9, column 0 to column 32)",
  " (in 'string', line 10, column 0 to column 35)",
  " (in 'string', line 11, column 0 to column 34)",
  " (in 'string', line 12, column 0 to column 38)",
  " (in 'string', line 16, column 0 to column 18)",
  " (in 'string', line 17, column 0 to column 19)",
  " (in 'string', line 18, column 0 to column 15)",
  " (in 'string', line 19, column 0 to column 15)",
  " (in 'string', line 20, column 0 to column 16)",
  " (in 'string', line 23, column 25 to column 29)",
  " (in 'string', line 23, column 0 to column 33)",
  " (in 'string', line 24, column 7 to column 11)",
  " (in 'string', line 24, column 13 to column 14)",
  " (in 'string', line 24, column 0 to column 18)",
  " (in 'string', line 25, column 7 to column 12)",
  " (in 'string', line 25, column 13 to column 14)",
  " (in 'string', line 25, column 0 to column 22)",
  " (in 'string', line 26, column 16 to column 20)",
  " (in 'string', line 26, column 0 to column 27)",
  " (in 'string', line 27, column 16 to column 20)",
  " (in 'string', line 27, column 0 to column 26)",
  " (in 'string', line 30, column 6 to column 10)",
  " (in 'string', line 30, column 0 to column 36)",
  " (in 'string', line 31, column 6 to column 11)",
  " (in 'string', line 31, column 0 to column 38)",
  " (in 'string', line 32, column 6 to column 7)",
  " (in 'string', line 32, column 0 to column 35)",
  " (in 'string', line 33, column 6 to column 16)",
  " (in 'string', line 33, column 0 to column 46)",
  " (in 'string', line 36, column 0 to column 21)",
  " (in 'string', line 37, column 0 to column 20)",
  " (in 'string', line 38, column 6 to column 12)",
  " (in 'string', line 38, column 0 to column 33)",
  " (in 'string', line 39, column 16 to column 17)",
  " (in 'string', line 39, column 0 to column 31)",
  " (in 'string', line 40, column 6 to column 13)",
  " (in 'string', line 40, column 0 to column 43)",
  " (in 'string', line 41, column 6 to column 13)",
  " (in 'string', line 41, column 0 to column 43)",
  " (in 'string', line 44, column 6 to column 10)",
  " (in 'string', line 44, column 0 to column 43)",
  " (in 'string', line 45, column 6 to column 10)",
  " (in 'string', line 45, column 0 to column 43)",
  " (in 'string', line 46, column 0 to column 31)",
  " (in 'string', line 47, column 6 to column 11)",
  " (in 'string', line 47, column 0 to column 34)",
  " (in 'string', line 50, column 0 to column 23)",
  " (in 'string', line 51, column 0 to column 20)",
  " (in 'string', line 52, column 0 to column 25)",
  " (in 'string', line 53, column 0 to column 22)",
  " (in 'string', line 56, column 0 to column 26)",
  " (in 'string', line 57, column 0 to column 28)",
  " (in 'string', line 58, column 0 to column 29)",
  " (in 'string', line 59, column 0 to column 26)",
  " (in 'string', line 62, column 2 to column 40)",
  " (in 'string', line 64, column 2 to column 49)",
  " (in 'string', line 65, column 2 to column 40)",
  " (in 'string', line 66, column 2 to column 21)",
  " (in 'string', line 67, column 2 to column 24)",
  " (in 'string', line 71, column 4 to column 71)",
  " (in 'string', line 70, column 7 to line 72, column 3)",
  " (in 'string', line 69, column 4 to column 13)",
  " (in 'string', line 68, column 10 to line 70, column 3)",
  " (in 'string', line 68, column 2 to line 72, column 3)",
  " (in 'string', line 79, column 6 to column 19)",
  " (in 'string', line 78, column 9 to line 80, column 5)",
  " (in 'string', line 77, column 6 to column 19)",
  " (in 'string', line 76, column 28 to line 78, column 5)",
  " (in 'string', line 76, column 4 to line 80, column 5)",
  " (in 'string', line 75, column 7 to line 81, column 3)",
  " (in 'string', line 74, column 4 to column 20)",
  " (in 'string', line 73, column 23 to line 75, column 3)",
  " (in 'string', line 73, column 2 to line 81, column 3)",
  " (in 'string', line 86, column 7 to column 27)",
  " (in 'string', line 87, column 7 to column 8)",
  " (in 'string', line 89, column 18 to column 40)",
  " (in 'string', line 90, column 20 to column 42)",
  " (in 'string', line 91, column 20 to column 42)",
  " (in 'string', line 94, column 7 to column 15)",
  " (in 'string', line 96, column 20 to column 86)",
  " (in 'string', line 98, column 20 to column 67)",
  " (in 'string', line 100, column 20 to column 74)",
  " (in 'string', line 101, column 20 to column 67)",
  " (in 'string', line 104, column 7 to column 27)",
  " (in 'string', line 105, column 16 to column 36)",
  " (in 'string', line 107, column 7 to column 28)",
  " (in 'string', line 107, column 30 to column 52)",
  " (in 'string', line 108, column 16 to column 37)",
  " (in 'string', line 112, column 32 to column 51)",
  " (in 'string', line 113, column 32 to column 51)",
  " (in 'string', line 115, column 7 to column 46)",
  " (in 'string', line 116, column 7 to column 46)",
  " (in 'string', line 117, column 7 to column 62)",
  " (in 'string', line 118, column 7 to column 62)",
  " (in 'string', line 123, column 7 to column 8)",
  " (in 'string', line 125, column 18 to column 38)",
  " (in 'string', line 126, column 18 to column 38)",
  " (in 'string', line 127, column 18 to column 38)",
  " (in 'string', line 130, column 24 to column 28)",
  " (in 'string', line 134, column 16 to column 20)",
  " (in 'string', line 135, column 16 to column 20)",
  " (in 'string', line 136, column 24 to column 28)",
  " (in 'string', line 139, column 16 to column 38)",
  " (in 'string', line 140, column 24 to column 46)",
  " (in 'string', line 141, column 24 to column 46)",
  " (in 'string', line 142, column 16 to column 38)",
  " (in 'string', line 143, column 16 to column 38)",
  " (in 'string', line 146, column 24 to column 66)",
  " (in 'string', line 147, column 24 to column 66)",
  " (in 'string', line 150, column 7 to column 15)",
  " (in 'string', line 151, column 7 to column 27)",
  " (in 'string', line 152, column 7 to column 28)",
  " (in 'string', line 152, column 30 to column 52)",
  " (in 'string', line 154, column 7 to column 11)",
  " (in 'string', line 156, column 7 to column 12)",
  " (in 'string', line 515, column 9 to column 13)",
  " (in 'string', line 516, column 9 to column 13)",
  " (in 'string', line 517, column 8 to column 9)",
  " (in 'string', line 518, column 8 to column 9)",
  " (in 'string', line 520, column 9 to column 29)",
  " (in 'string', line 521, column 26 to column 51)"};
#include <stan_meta_header.hpp>
class model_global final : public model_base_crtp<model_global> {
private:
  int intercept;
  int deff;
  int prior_reff;
  int prior_coeff;
  int likelihood;
  int inflation;
  int temporal_err;
  int spatial_err;
  int spatio_temporal;
  int M_is;
  int M_oos;
  int D;
  int P;
  int TP;
  Eigen::Matrix<double,-1,1> y_data__;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> X_oos_data__;
  Eigen::Matrix<double,-1,1> disp_data__;
  Eigen::Matrix<double,-1,1> m_d_data__;
  std::vector<int> indices_is;
  std::vector<int> indices_oos;
  std::vector<int> indices_spat;
  std::vector<std::vector<int>> indices_temp;
  int N_edges;
  int N_comp;
  std::vector<int> dim_c;
  Eigen::Matrix<double,-1,1> scales_ICAR_data__;
  std::vector<int> node1;
  std::vector<int> node2;
  std::vector<int> node1_t;
  std::vector<int> node2_t;
  double scale_factor_RW1;
  std::vector<int> cat_ios;
  double sigma_HS;
  double p0_HS;
  double slab_scale;
  double slab_df;
  double sigma_unstr;
  double sigma_spatial;
  double sigma_temporal;
  double sigma_coeff;
  int M_overall;
  double slab_scale2;
  double half_nu;
  double tau0;
  int length_v;
  int beta0_1dim__;
  int lambda_HS_1dim__;
  int z_c2_1dim__;
  int z_tau_1dim__;
  int sigma_v_1dim__;
  int nu_1dim__;
  int psi_d_1dim__;
  int lambda_1dim__;
  int s_raw_1dim__;
  int sigma_s_1dim__;
  int t_raw_1dim__;
  int t_raw_2dim__;
  int sigma_t_1dim__;
  int w_1dim__;
  int p_1dim__;
  int gamma_p0_1dim__;
  int gamma_p1_1dim__;
  int gamma0_p0_1dim__;
  int gamma0_p1_1dim__;
  int tau_1dim__;
  int c2_1dim__;
  int lambda_tilde_1dim__;
  int phi_1dim__;
  int lambda1_1dim__;
  int lambda2_1dim__;
  int b2_1dim__;
  int a2_1dim__;
  int p0_1dim__;
  int p1_1dim__;
  int s_1dim__;
  int t_1dim__;
  int t_2dim__;
  int probs_1dim__;
  int theta_oos_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X_oos{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> disp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> m_d{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> scales_ICAR{nullptr, 0};
public:
  ~model_global() {}
  model_global(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_global_namespace::model_global";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 490;
      context__.validate_dims("data initialization", "intercept", "int",
        std::vector<size_t>{});
      intercept = std::numeric_limits<int>::min();
      current_statement__ = 490;
      intercept = context__.vals_i("intercept")[(1 - 1)];
      current_statement__ = 490;
      stan::math::check_greater_or_equal(function__, "intercept", intercept,
        0);
      current_statement__ = 490;
      stan::math::check_less_or_equal(function__, "intercept", intercept, 1);
      current_statement__ = 491;
      context__.validate_dims("data initialization", "deff", "int",
        std::vector<size_t>{});
      deff = std::numeric_limits<int>::min();
      current_statement__ = 491;
      deff = context__.vals_i("deff")[(1 - 1)];
      current_statement__ = 491;
      stan::math::check_greater_or_equal(function__, "deff", deff, 0);
      current_statement__ = 491;
      stan::math::check_less_or_equal(function__, "deff", deff, 1);
      current_statement__ = 492;
      context__.validate_dims("data initialization", "prior_reff", "int",
        std::vector<size_t>{});
      prior_reff = std::numeric_limits<int>::min();
      current_statement__ = 492;
      prior_reff = context__.vals_i("prior_reff")[(1 - 1)];
      current_statement__ = 492;
      stan::math::check_greater_or_equal(function__, "prior_reff",
        prior_reff, 0);
      current_statement__ = 492;
      stan::math::check_less_or_equal(function__, "prior_reff", prior_reff, 2);
      current_statement__ = 493;
      context__.validate_dims("data initialization", "prior_coeff", "int",
        std::vector<size_t>{});
      prior_coeff = std::numeric_limits<int>::min();
      current_statement__ = 493;
      prior_coeff = context__.vals_i("prior_coeff")[(1 - 1)];
      current_statement__ = 493;
      stan::math::check_greater_or_equal(function__, "prior_coeff",
        prior_coeff, 0);
      current_statement__ = 493;
      stan::math::check_less_or_equal(function__, "prior_coeff", prior_coeff,
        1);
      current_statement__ = 494;
      context__.validate_dims("data initialization", "likelihood", "int",
        std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      current_statement__ = 494;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 494;
      stan::math::check_greater_or_equal(function__, "likelihood",
        likelihood, 0);
      current_statement__ = 494;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 3);
      current_statement__ = 495;
      context__.validate_dims("data initialization", "inflation", "int",
        std::vector<size_t>{});
      inflation = std::numeric_limits<int>::min();
      current_statement__ = 495;
      inflation = context__.vals_i("inflation")[(1 - 1)];
      current_statement__ = 495;
      stan::math::check_greater_or_equal(function__, "inflation", inflation,
        0);
      current_statement__ = 495;
      stan::math::check_less_or_equal(function__, "inflation", inflation, 2);
      current_statement__ = 496;
      context__.validate_dims("data initialization", "temporal_err", "int",
        std::vector<size_t>{});
      temporal_err = std::numeric_limits<int>::min();
      current_statement__ = 496;
      temporal_err = context__.vals_i("temporal_err")[(1 - 1)];
      current_statement__ = 496;
      stan::math::check_greater_or_equal(function__, "temporal_err",
        temporal_err, 0);
      current_statement__ = 496;
      stan::math::check_less_or_equal(function__, "temporal_err",
        temporal_err, 1);
      current_statement__ = 497;
      context__.validate_dims("data initialization", "spatial_err", "int",
        std::vector<size_t>{});
      spatial_err = std::numeric_limits<int>::min();
      current_statement__ = 497;
      spatial_err = context__.vals_i("spatial_err")[(1 - 1)];
      current_statement__ = 497;
      stan::math::check_greater_or_equal(function__, "spatial_err",
        spatial_err, 0);
      current_statement__ = 497;
      stan::math::check_less_or_equal(function__, "spatial_err", spatial_err,
        1);
      current_statement__ = 498;
      context__.validate_dims("data initialization", "spatio_temporal",
        "int", std::vector<size_t>{});
      spatio_temporal = std::numeric_limits<int>::min();
      current_statement__ = 498;
      spatio_temporal = context__.vals_i("spatio_temporal")[(1 - 1)];
      current_statement__ = 498;
      stan::math::check_greater_or_equal(function__, "spatio_temporal",
        spatio_temporal, 0);
      current_statement__ = 498;
      stan::math::check_less_or_equal(function__, "spatio_temporal",
        spatio_temporal, 1);
      current_statement__ = 499;
      context__.validate_dims("data initialization", "M_is", "int",
        std::vector<size_t>{});
      M_is = std::numeric_limits<int>::min();
      current_statement__ = 499;
      M_is = context__.vals_i("M_is")[(1 - 1)];
      current_statement__ = 499;
      stan::math::check_greater_or_equal(function__, "M_is", M_is, 0);
      current_statement__ = 500;
      context__.validate_dims("data initialization", "M_oos", "int",
        std::vector<size_t>{});
      M_oos = std::numeric_limits<int>::min();
      current_statement__ = 500;
      M_oos = context__.vals_i("M_oos")[(1 - 1)];
      current_statement__ = 500;
      stan::math::check_greater_or_equal(function__, "M_oos", M_oos, 0);
      current_statement__ = 501;
      context__.validate_dims("data initialization", "D", "int",
        std::vector<size_t>{});
      D = std::numeric_limits<int>::min();
      current_statement__ = 501;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 501;
      stan::math::check_greater_or_equal(function__, "D", D, 0);
      current_statement__ = 502;
      context__.validate_dims("data initialization", "P", "int",
        std::vector<size_t>{});
      P = std::numeric_limits<int>::min();
      current_statement__ = 502;
      P = context__.vals_i("P")[(1 - 1)];
      current_statement__ = 502;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 503;
      context__.validate_dims("data initialization", "TP", "int",
        std::vector<size_t>{});
      TP = std::numeric_limits<int>::min();
      current_statement__ = 503;
      TP = context__.vals_i("TP")[(1 - 1)];
      current_statement__ = 503;
      stan::math::check_greater_or_equal(function__, "TP", TP, 0);
      current_statement__ = 504;
      stan::math::validate_non_negative_index("y", "M_is", M_is);
      current_statement__ = 505;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(M_is)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(M_is,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), M_is);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 505;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 505;
        pos__ = 1;
        current_statement__ = 505;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 505;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 505;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 505;
      stan::math::check_greater_or_equal(function__, "y", y, 0);
      current_statement__ = 505;
      stan::math::check_less_or_equal(function__, "y", y, 1);
      current_statement__ = 506;
      stan::math::validate_non_negative_index("X", "M_is", M_is);
      current_statement__ = 507;
      stan::math::validate_non_negative_index("X", "P", P);
      current_statement__ = 508;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(M_is),
          static_cast<size_t>(P)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(M_is, P,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), M_is,
        P);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 508;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 508;
        pos__ = 1;
        current_statement__ = 508;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 508;
          for (int sym2__ = 1; sym2__ <= M_is; ++sym2__) {
            current_statement__ = 508;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 508;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 509;
      stan::math::validate_non_negative_index("X_oos", "M_oos", M_oos);
      current_statement__ = 510;
      stan::math::validate_non_negative_index("X_oos", "P", P);
      current_statement__ = 511;
      context__.validate_dims("data initialization", "X_oos", "double",
        std::vector<size_t>{static_cast<size_t>(M_oos),
          static_cast<size_t>(P)});
      X_oos_data__ = Eigen::Matrix<double,-1,-1>::Constant(M_oos, P,
                       std::numeric_limits<double>::quiet_NaN());
      new (&X_oos)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_oos_data__.data(), M_oos,
        P);
      {
        std::vector<local_scalar_t__> X_oos_flat__;
        current_statement__ = 511;
        X_oos_flat__ = context__.vals_r("X_oos");
        current_statement__ = 511;
        pos__ = 1;
        current_statement__ = 511;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 511;
          for (int sym2__ = 1; sym2__ <= M_oos; ++sym2__) {
            current_statement__ = 511;
            stan::model::assign(X_oos, X_oos_flat__[(pos__ - 1)],
              "assigning variable X_oos", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 511;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 512;
      stan::math::validate_non_negative_index("disp", "M_is", M_is);
      current_statement__ = 513;
      context__.validate_dims("data initialization", "disp", "double",
        std::vector<size_t>{static_cast<size_t>(M_is)});
      disp_data__ = Eigen::Matrix<double,-1,1>::Constant(M_is,
                      std::numeric_limits<double>::quiet_NaN());
      new (&disp) Eigen::Map<Eigen::Matrix<double,-1,1>>(disp_data__.data(),
        M_is);
      {
        std::vector<local_scalar_t__> disp_flat__;
        current_statement__ = 513;
        disp_flat__ = context__.vals_r("disp");
        current_statement__ = 513;
        pos__ = 1;
        current_statement__ = 513;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 513;
          stan::model::assign(disp, disp_flat__[(pos__ - 1)],
            "assigning variable disp", stan::model::index_uni(sym1__));
          current_statement__ = 513;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 513;
      stan::math::check_greater_or_equal(function__, "disp", disp, 0);
      current_statement__ = 514;
      stan::math::validate_non_negative_index("m_d", "M_is", M_is);
      current_statement__ = 515;
      context__.validate_dims("data initialization", "m_d", "double",
        std::vector<size_t>{static_cast<size_t>(M_is)});
      m_d_data__ = Eigen::Matrix<double,-1,1>::Constant(M_is,
                     std::numeric_limits<double>::quiet_NaN());
      new (&m_d) Eigen::Map<Eigen::Matrix<double,-1,1>>(m_d_data__.data(),
        M_is);
      {
        std::vector<local_scalar_t__> m_d_flat__;
        current_statement__ = 515;
        m_d_flat__ = context__.vals_r("m_d");
        current_statement__ = 515;
        pos__ = 1;
        current_statement__ = 515;
        for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
          current_statement__ = 515;
          stan::model::assign(m_d, m_d_flat__[(pos__ - 1)],
            "assigning variable m_d", stan::model::index_uni(sym1__));
          current_statement__ = 515;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 515;
      stan::math::check_greater_or_equal(function__, "m_d", m_d, 0);
      current_statement__ = 516;
      stan::math::validate_non_negative_index("indices_is", "M_is", M_is);
      current_statement__ = 517;
      context__.validate_dims("data initialization", "indices_is", "int",
        std::vector<size_t>{static_cast<size_t>(M_is)});
      indices_is = std::vector<int>(M_is, std::numeric_limits<int>::min());
      current_statement__ = 517;
      indices_is = context__.vals_i("indices_is");
      current_statement__ = 517;
      stan::math::check_greater_or_equal(function__, "indices_is",
        indices_is, 0);
      current_statement__ = 518;
      stan::math::validate_non_negative_index("indices_oos", "M_oos", M_oos);
      current_statement__ = 519;
      context__.validate_dims("data initialization", "indices_oos", "int",
        std::vector<size_t>{static_cast<size_t>(M_oos)});
      indices_oos = std::vector<int>(M_oos, std::numeric_limits<int>::min());
      current_statement__ = 519;
      indices_oos = context__.vals_i("indices_oos");
      current_statement__ = 519;
      stan::math::check_greater_or_equal(function__, "indices_oos",
        indices_oos, 0);
      current_statement__ = 520;
      stan::math::validate_non_negative_index("indices_spat", "D", D);
      current_statement__ = 521;
      context__.validate_dims("data initialization", "indices_spat", "int",
        std::vector<size_t>{static_cast<size_t>(D)});
      indices_spat = std::vector<int>(D, std::numeric_limits<int>::min());
      current_statement__ = 521;
      indices_spat = context__.vals_i("indices_spat");
      current_statement__ = 521;
      stan::math::check_greater_or_equal(function__, "indices_spat",
        indices_spat, 0);
      current_statement__ = 522;
      stan::math::validate_non_negative_index("indices_temp", "M_is + M_oos",
        (M_is + M_oos));
      current_statement__ = 523;
      context__.validate_dims("data initialization", "indices_temp", "int",
        std::vector<size_t>{static_cast<size_t>((M_is + M_oos)),
          static_cast<size_t>(2)});
      indices_temp = std::vector<std::vector<int>>((M_is + M_oos),
                       std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> indices_temp_flat__;
        current_statement__ = 523;
        indices_temp_flat__ = context__.vals_i("indices_temp");
        current_statement__ = 523;
        pos__ = 1;
        current_statement__ = 523;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 523;
          for (int sym2__ = 1; sym2__ <= (M_is + M_oos); ++sym2__) {
            current_statement__ = 523;
            stan::model::assign(indices_temp, indices_temp_flat__[(pos__ -
              1)], "assigning variable indices_temp",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 523;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 523;
      stan::math::check_greater_or_equal(function__, "indices_temp",
        indices_temp, 0);
      current_statement__ = 524;
      context__.validate_dims("data initialization", "N_edges", "int",
        std::vector<size_t>{});
      N_edges = std::numeric_limits<int>::min();
      current_statement__ = 524;
      N_edges = context__.vals_i("N_edges")[(1 - 1)];
      current_statement__ = 524;
      stan::math::check_greater_or_equal(function__, "N_edges", N_edges, 0);
      current_statement__ = 525;
      context__.validate_dims("data initialization", "N_comp", "int",
        std::vector<size_t>{});
      N_comp = std::numeric_limits<int>::min();
      current_statement__ = 525;
      N_comp = context__.vals_i("N_comp")[(1 - 1)];
      current_statement__ = 525;
      stan::math::check_greater_or_equal(function__, "N_comp", N_comp, 0);
      current_statement__ = 526;
      stan::math::validate_non_negative_index("dim_c", "N_comp", N_comp);
      current_statement__ = 527;
      context__.validate_dims("data initialization", "dim_c", "int",
        std::vector<size_t>{static_cast<size_t>(N_comp)});
      dim_c = std::vector<int>(N_comp, std::numeric_limits<int>::min());
      current_statement__ = 527;
      dim_c = context__.vals_i("dim_c");
      current_statement__ = 527;
      stan::math::check_greater_or_equal(function__, "dim_c", dim_c, 0);
      current_statement__ = 528;
      stan::math::validate_non_negative_index("scales_ICAR", "D", D);
      current_statement__ = 529;
      context__.validate_dims("data initialization", "scales_ICAR", "double",
        std::vector<size_t>{static_cast<size_t>(D)});
      scales_ICAR_data__ = Eigen::Matrix<double,-1,1>::Constant(D,
                             std::numeric_limits<double>::quiet_NaN());
      new (&scales_ICAR)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(scales_ICAR_data__.data(), D);
      {
        std::vector<local_scalar_t__> scales_ICAR_flat__;
        current_statement__ = 529;
        scales_ICAR_flat__ = context__.vals_r("scales_ICAR");
        current_statement__ = 529;
        pos__ = 1;
        current_statement__ = 529;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 529;
          stan::model::assign(scales_ICAR, scales_ICAR_flat__[(pos__ - 1)],
            "assigning variable scales_ICAR", stan::model::index_uni(sym1__));
          current_statement__ = 529;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 529;
      stan::math::check_greater_or_equal(function__, "scales_ICAR",
        scales_ICAR, 0);
      current_statement__ = 530;
      stan::math::validate_non_negative_index("node1", "N_edges", N_edges);
      current_statement__ = 531;
      context__.validate_dims("data initialization", "node1", "int",
        std::vector<size_t>{static_cast<size_t>(N_edges)});
      node1 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      current_statement__ = 531;
      node1 = context__.vals_i("node1");
      current_statement__ = 531;
      stan::math::check_greater_or_equal(function__, "node1", node1, 1);
      current_statement__ = 531;
      stan::math::check_less_or_equal(function__, "node1", node1, D);
      current_statement__ = 532;
      stan::math::validate_non_negative_index("node2", "N_edges", N_edges);
      current_statement__ = 533;
      context__.validate_dims("data initialization", "node2", "int",
        std::vector<size_t>{static_cast<size_t>(N_edges)});
      node2 = std::vector<int>(N_edges, std::numeric_limits<int>::min());
      current_statement__ = 533;
      node2 = context__.vals_i("node2");
      current_statement__ = 533;
      stan::math::check_greater_or_equal(function__, "node2", node2, 1);
      current_statement__ = 533;
      stan::math::check_less_or_equal(function__, "node2", node2, D);
      current_statement__ = 534;
      stan::math::validate_non_negative_index("node1_t", "TP - 1", (TP - 1));
      current_statement__ = 535;
      context__.validate_dims("data initialization", "node1_t", "int",
        std::vector<size_t>{static_cast<size_t>((TP - 1))});
      node1_t = std::vector<int>((TP - 1), std::numeric_limits<int>::min());
      current_statement__ = 535;
      node1_t = context__.vals_i("node1_t");
      current_statement__ = 535;
      stan::math::check_greater_or_equal(function__, "node1_t", node1_t, 1);
      current_statement__ = 535;
      stan::math::check_less_or_equal(function__, "node1_t", node1_t, TP);
      current_statement__ = 536;
      stan::math::validate_non_negative_index("node2_t", "TP - 1", (TP - 1));
      current_statement__ = 537;
      context__.validate_dims("data initialization", "node2_t", "int",
        std::vector<size_t>{static_cast<size_t>((TP - 1))});
      node2_t = std::vector<int>((TP - 1), std::numeric_limits<int>::min());
      current_statement__ = 537;
      node2_t = context__.vals_i("node2_t");
      current_statement__ = 537;
      stan::math::check_greater_or_equal(function__, "node2_t", node2_t, 1);
      current_statement__ = 537;
      stan::math::check_less_or_equal(function__, "node2_t", node2_t, TP);
      current_statement__ = 538;
      context__.validate_dims("data initialization", "scale_factor_RW1",
        "double", std::vector<size_t>{});
      scale_factor_RW1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 538;
      scale_factor_RW1 = context__.vals_r("scale_factor_RW1")[(1 - 1)];
      current_statement__ = 538;
      stan::math::check_greater_or_equal(function__, "scale_factor_RW1",
        scale_factor_RW1, 0);
      current_statement__ = 539;
      stan::math::validate_non_negative_index("cat_ios", "M_oos", M_oos);
      current_statement__ = 540;
      context__.validate_dims("data initialization", "cat_ios", "int",
        std::vector<size_t>{static_cast<size_t>(M_oos)});
      cat_ios = std::vector<int>(M_oos, std::numeric_limits<int>::min());
      current_statement__ = 540;
      cat_ios = context__.vals_i("cat_ios");
      current_statement__ = 540;
      stan::math::check_greater_or_equal(function__, "cat_ios", cat_ios, 0);
      current_statement__ = 541;
      context__.validate_dims("data initialization", "sigma_HS", "double",
        std::vector<size_t>{});
      sigma_HS = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 541;
      sigma_HS = context__.vals_r("sigma_HS")[(1 - 1)];
      current_statement__ = 541;
      stan::math::check_greater_or_equal(function__, "sigma_HS", sigma_HS, 0);
      current_statement__ = 542;
      context__.validate_dims("data initialization", "p0_HS", "double",
        std::vector<size_t>{});
      p0_HS = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 542;
      p0_HS = context__.vals_r("p0_HS")[(1 - 1)];
      current_statement__ = 542;
      stan::math::check_greater_or_equal(function__, "p0_HS", p0_HS, 0);
      current_statement__ = 543;
      context__.validate_dims("data initialization", "slab_scale", "double",
        std::vector<size_t>{});
      slab_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 543;
      slab_scale = context__.vals_r("slab_scale")[(1 - 1)];
      current_statement__ = 543;
      stan::math::check_greater_or_equal(function__, "slab_scale",
        slab_scale, 0);
      current_statement__ = 544;
      context__.validate_dims("data initialization", "slab_df", "double",
        std::vector<size_t>{});
      slab_df = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 544;
      slab_df = context__.vals_r("slab_df")[(1 - 1)];
      current_statement__ = 544;
      stan::math::check_greater_or_equal(function__, "slab_df", slab_df, 0);
      current_statement__ = 545;
      context__.validate_dims("data initialization", "sigma_unstr", "double",
        std::vector<size_t>{});
      sigma_unstr = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 545;
      sigma_unstr = context__.vals_r("sigma_unstr")[(1 - 1)];
      current_statement__ = 545;
      stan::math::check_greater_or_equal(function__, "sigma_unstr",
        sigma_unstr, 0);
      current_statement__ = 546;
      context__.validate_dims("data initialization", "sigma_spatial",
        "double", std::vector<size_t>{});
      sigma_spatial = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 546;
      sigma_spatial = context__.vals_r("sigma_spatial")[(1 - 1)];
      current_statement__ = 546;
      stan::math::check_greater_or_equal(function__, "sigma_spatial",
        sigma_spatial, 0);
      current_statement__ = 547;
      context__.validate_dims("data initialization", "sigma_temporal",
        "double", std::vector<size_t>{});
      sigma_temporal = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 547;
      sigma_temporal = context__.vals_r("sigma_temporal")[(1 - 1)];
      current_statement__ = 547;
      stan::math::check_greater_or_equal(function__, "sigma_temporal",
        sigma_temporal, 0);
      current_statement__ = 548;
      context__.validate_dims("data initialization", "sigma_coeff", "double",
        std::vector<size_t>{});
      sigma_coeff = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 548;
      sigma_coeff = context__.vals_r("sigma_coeff")[(1 - 1)];
      current_statement__ = 548;
      stan::math::check_greater_or_equal(function__, "sigma_coeff",
        sigma_coeff, 0);
      current_statement__ = 549;
      M_overall = std::numeric_limits<int>::min();
      current_statement__ = 549;
      M_overall = (M_is + M_oos);
      current_statement__ = 550;
      slab_scale2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 550;
      slab_scale2 = stan::math::square(slab_scale);
      current_statement__ = 551;
      half_nu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 551;
      half_nu = (0.5 * slab_df);
      current_statement__ = 552;
      tau0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 553;
      length_v = std::numeric_limits<int>::min();
      current_statement__ = 558;
      if (stan::math::logical_eq(P, 0)) {
        current_statement__ = 556;
        tau0 = 1;
      } else {
        current_statement__ = 554;
        tau0 = ((p0_HS / ((1.0 * P) - p0_HS)) * (sigma_HS /
          stan::math::sqrt((1.0 * M_is))));
      }
      current_statement__ = 567;
      if (stan::math::logical_eq(temporal_err, 0)) {
        current_statement__ = 565;
        length_v = M_is;
      } else {
        current_statement__ = 563;
        if (stan::math::logical_eq(spatio_temporal, 1)) {
          current_statement__ = 561;
          length_v = 0;
        } else {
          current_statement__ = 559;
          length_v = D;
        }
      }
      current_statement__ = 549;
      stan::math::check_greater_or_equal(function__, "M_overall", M_overall,
        0);
      current_statement__ = 550;
      stan::math::check_greater_or_equal(function__, "slab_scale2",
        slab_scale2, 0);
      current_statement__ = 551;
      stan::math::check_greater_or_equal(function__, "half_nu", half_nu, 0);
      current_statement__ = 552;
      stan::math::check_greater_or_equal(function__, "tau0", tau0, 0);
      current_statement__ = 553;
      stan::math::check_greater_or_equal(function__, "length_v", length_v, 0);
      current_statement__ = 568;
      beta0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 568;
      beta0_1dim__ = (stan::math::logical_eq(intercept, 1) ? 1 : 0);
      current_statement__ = 568;
      stan::math::validate_non_negative_index("beta0",
        "intercept == 1 ? 1 : 0", beta0_1dim__);
      current_statement__ = 569;
      stan::math::validate_non_negative_index("z_beta", "P", P);
      current_statement__ = 570;
      lambda_HS_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 570;
      lambda_HS_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? P : 0);
      current_statement__ = 570;
      stan::math::validate_non_negative_index("lambda_HS",
        "prior_coeff == 1 ? P : 0", lambda_HS_1dim__);
      current_statement__ = 571;
      z_c2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 571;
      z_c2_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 571;
      stan::math::validate_non_negative_index("z_c2",
        "prior_coeff == 1 ? 1 : 0", z_c2_1dim__);
      current_statement__ = 572;
      z_tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 572;
      z_tau_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 572;
      stan::math::validate_non_negative_index("z_tau",
        "prior_coeff == 1 ? 1 : 0", z_tau_1dim__);
      current_statement__ = 573;
      stan::math::validate_non_negative_index("v_raw", "length_v", length_v);
      current_statement__ = 574;
      sigma_v_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 574;
      sigma_v_1dim__ = ((stan::math::primitive_value(
                           (stan::math::primitive_value(
                              stan::math::logical_eq(prior_reff, 0)) ||
                           stan::math::primitive_value(
                             stan::math::logical_eq(prior_reff, 1))))
        &&
        stan::math::primitive_value(
          stan::math::logical_eq(spatio_temporal, 0))) ? 1 : 0);
      current_statement__ = 574;
      stan::math::validate_non_negative_index("sigma_v",
        "((prior_reff == 0 || prior_reff == 1) && spatio_temporal == 0) ? 1 : 0",
        sigma_v_1dim__);
      current_statement__ = 575;
      nu_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 575;
      nu_1dim__ = ((stan::math::primitive_value(
                      stan::math::logical_eq(prior_reff, 1))
        &&
        stan::math::primitive_value(
          stan::math::logical_eq(spatio_temporal, 0))) ? 1 : 0);
      current_statement__ = 575;
      stan::math::validate_non_negative_index("nu",
        "(prior_reff == 1 && spatio_temporal == 0) ? 1 : 0", nu_1dim__);
      current_statement__ = 576;
      psi_d_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 576;
      psi_d_1dim__ = ((stan::math::primitive_value(
                         stan::math::logical_eq(prior_reff, 2))
        &&
        stan::math::primitive_value(
          stan::math::logical_eq(spatio_temporal, 0))) ? length_v : 0);
      current_statement__ = 576;
      stan::math::validate_non_negative_index("psi_d",
        "(prior_reff == 2 && spatio_temporal == 0) ? length_v : 0",
        psi_d_1dim__);
      current_statement__ = 577;
      lambda_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 577;
      lambda_1dim__ = ((stan::math::primitive_value(
                          stan::math::logical_eq(prior_reff, 2))
        &&
        stan::math::primitive_value(
          stan::math::logical_eq(spatio_temporal, 0))) ? 1 : 0);
      current_statement__ = 577;
      stan::math::validate_non_negative_index("lambda",
        "(prior_reff == 2 && spatio_temporal == 0) ? 1 : 0", lambda_1dim__);
      current_statement__ = 578;
      s_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 578;
      s_raw_1dim__ = (stan::math::logical_eq(spatial_err, 1) ? D : 0);
      current_statement__ = 578;
      stan::math::validate_non_negative_index("s_raw",
        "spatial_err == 1 ? D : 0", s_raw_1dim__);
      current_statement__ = 579;
      sigma_s_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 579;
      sigma_s_1dim__ = (stan::math::logical_eq(spatial_err, 1) ? 1 : 0);
      current_statement__ = 579;
      stan::math::validate_non_negative_index("sigma_s",
        "spatial_err == 1 ? 1 : 0", sigma_s_1dim__);
      current_statement__ = 580;
      t_raw_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 580;
      t_raw_1dim__ = (stan::math::logical_eq(temporal_err, 1) ? D : 0);
      current_statement__ = 580;
      stan::math::validate_non_negative_index("t_raw",
        "temporal_err == 1 ? D : 0", t_raw_1dim__);
      current_statement__ = 581;
      t_raw_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 581;
      t_raw_2dim__ = (stan::math::logical_eq(temporal_err, 1) ? TP : 0);
      current_statement__ = 581;
      stan::math::validate_non_negative_index("t_raw",
        "temporal_err == 1 ? TP : 0", t_raw_2dim__);
      current_statement__ = 582;
      sigma_t_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 582;
      sigma_t_1dim__ = (stan::math::logical_eq(temporal_err, 1) ? 1 : 0);
      current_statement__ = 582;
      stan::math::validate_non_negative_index("sigma_t",
        "temporal_err == 1 ? 1 : 0", sigma_t_1dim__);
      current_statement__ = 583;
      w_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 583;
      w_1dim__ = (stan::math::logical_eq(likelihood, 1) ? 1 : 0);
      current_statement__ = 583;
      stan::math::validate_non_negative_index("w", "likelihood == 1 ? 1 : 0",
        w_1dim__);
      current_statement__ = 584;
      p_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 584;
      p_1dim__ = (stan::math::logical_eq(likelihood, 1) ? 1 : 0);
      current_statement__ = 584;
      stan::math::validate_non_negative_index("p", "likelihood == 1 ? 1 : 0",
        p_1dim__);
      current_statement__ = 585;
      gamma_p0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 585;
      gamma_p0_1dim__ = ((stan::math::primitive_value(
                            stan::math::logical_eq(likelihood, 2))
        &&
        stan::math::primitive_value(stan::math::logical_neq(inflation, 1))) ? P : 0);
      current_statement__ = 585;
      stan::math::validate_non_negative_index("gamma_p0",
        "(likelihood == 2 && inflation != 1) ? P : 0", gamma_p0_1dim__);
      current_statement__ = 586;
      gamma_p1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 586;
      gamma_p1_1dim__ = ((stan::math::primitive_value(
                            stan::math::logical_eq(likelihood, 2))
        &&
        stan::math::primitive_value(stan::math::logical_neq(inflation, 0))) ? P : 0);
      current_statement__ = 586;
      stan::math::validate_non_negative_index("gamma_p1",
        "(likelihood == 2 && inflation != 0) ? P : 0", gamma_p1_1dim__);
      current_statement__ = 587;
      gamma0_p0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 587;
      gamma0_p0_1dim__ = ((stan::math::primitive_value(
                             (stan::math::primitive_value(
                                stan::math::logical_eq(likelihood, 2)) &&
                             stan::math::primitive_value(
                               stan::math::logical_neq(inflation, 1))))
        &&
        stan::math::primitive_value(stan::math::logical_eq(intercept, 1))) ? 1 : 0);
      current_statement__ = 587;
      stan::math::validate_non_negative_index("gamma0_p0",
        "(likelihood == 2 && inflation != 1 && intercept == 1) ? 1 : 0",
        gamma0_p0_1dim__);
      current_statement__ = 588;
      gamma0_p1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 588;
      gamma0_p1_1dim__ = ((stan::math::primitive_value(
                             (stan::math::primitive_value(
                                stan::math::logical_eq(likelihood, 2)) &&
                             stan::math::primitive_value(
                               stan::math::logical_neq(inflation, 0))))
        &&
        stan::math::primitive_value(stan::math::logical_eq(intercept, 1))) ? 1 : 0);
      current_statement__ = 588;
      stan::math::validate_non_negative_index("gamma0_p1",
        "(likelihood == 2 && inflation != 0 && intercept == 1) ? 1 : 0",
        gamma0_p1_1dim__);
      current_statement__ = 589;
      stan::math::validate_non_negative_index("beta", "P", P);
      current_statement__ = 590;
      tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 590;
      tau_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 590;
      stan::math::validate_non_negative_index("tau",
        "prior_coeff == 1 ? 1 : 0", tau_1dim__);
      current_statement__ = 591;
      c2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 591;
      c2_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? 1 : 0);
      current_statement__ = 591;
      stan::math::validate_non_negative_index("c2",
        "prior_coeff == 1 ? 1 : 0", c2_1dim__);
      current_statement__ = 592;
      lambda_tilde_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 592;
      lambda_tilde_1dim__ = (stan::math::logical_eq(prior_coeff, 1) ? P : 0);
      current_statement__ = 592;
      stan::math::validate_non_negative_index("lambda_tilde",
        "prior_coeff == 1 ? P : 0", lambda_tilde_1dim__);
      current_statement__ = 593;
      stan::math::validate_non_negative_index("theta", "M_is", M_is);
      current_statement__ = 594;
      stan::math::validate_non_negative_index("b1", "M_is", M_is);
      current_statement__ = 595;
      stan::math::validate_non_negative_index("a1", "M_is", M_is);
      current_statement__ = 596;
      stan::math::validate_non_negative_index("mu", "M_is", M_is);
      current_statement__ = 597;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 597;
      phi_1dim__ = (stan::math::logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 597;
      stan::math::validate_non_negative_index("phi",
        "likelihood == 1 ? M_is : 0", phi_1dim__);
      current_statement__ = 598;
      lambda1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 598;
      lambda1_1dim__ = (stan::math::logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 598;
      stan::math::validate_non_negative_index("lambda1",
        "likelihood == 1 ? M_is : 0", lambda1_1dim__);
      current_statement__ = 599;
      lambda2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 599;
      lambda2_1dim__ = (stan::math::logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 599;
      stan::math::validate_non_negative_index("lambda2",
        "likelihood == 1 ? M_is : 0", lambda2_1dim__);
      current_statement__ = 600;
      b2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 600;
      b2_1dim__ = (stan::math::logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 600;
      stan::math::validate_non_negative_index("b2",
        "likelihood == 1 ? M_is : 0", b2_1dim__);
      current_statement__ = 601;
      a2_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 601;
      a2_1dim__ = (stan::math::logical_eq(likelihood, 1) ? M_is : 0);
      current_statement__ = 601;
      stan::math::validate_non_negative_index("a2",
        "likelihood == 1 ? M_is : 0", a2_1dim__);
      current_statement__ = 602;
      p0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 602;
      p0_1dim__ = ((stan::math::primitive_value(
                      stan::math::logical_eq(likelihood, 2))
        &&
        stan::math::primitive_value(stan::math::logical_neq(inflation, 1))) ? M_is : 0);
      current_statement__ = 602;
      stan::math::validate_non_negative_index("p0",
        "(likelihood == 2 && inflation != 1) ? M_is : 0", p0_1dim__);
      current_statement__ = 603;
      p1_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 603;
      p1_1dim__ = ((stan::math::primitive_value(
                      stan::math::logical_eq(likelihood, 2))
        &&
        stan::math::primitive_value(stan::math::logical_neq(inflation, 0))) ? M_is : 0);
      current_statement__ = 603;
      stan::math::validate_non_negative_index("p1",
        "(likelihood == 2 && inflation != 0) ? M_is : 0", p1_1dim__);
      current_statement__ = 604;
      stan::math::validate_non_negative_index("v", "length_v", length_v);
      current_statement__ = 605;
      s_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 605;
      s_1dim__ = (stan::math::logical_eq(spatial_err, 1) ? D : 0);
      current_statement__ = 605;
      stan::math::validate_non_negative_index("s",
        "spatial_err == 1 ? D : 0", s_1dim__);
      current_statement__ = 606;
      t_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 606;
      t_1dim__ = (stan::math::logical_eq(temporal_err, 1) ? D : 0);
      current_statement__ = 606;
      stan::math::validate_non_negative_index("t",
        "temporal_err == 1 ? D : 0", t_1dim__);
      current_statement__ = 607;
      t_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 607;
      t_2dim__ = (stan::math::logical_eq(temporal_err, 1) ? TP : 0);
      current_statement__ = 607;
      stan::math::validate_non_negative_index("t",
        "temporal_err == 1 ? TP : 0", t_2dim__);
      current_statement__ = 608;
      stan::math::validate_non_negative_index("reffs", "M_is", M_is);
      current_statement__ = 609;
      stan::math::validate_non_negative_index("reffs_oos", "M_oos", M_oos);
      current_statement__ = 610;
      stan::math::validate_non_negative_index("log_lik", "M_is", M_is);
      current_statement__ = 611;
      stan::math::validate_non_negative_index("y_rep", "M_is", M_is);
      current_statement__ = 612;
      stan::math::validate_non_negative_index("psi_OOS", "1", 1);
      current_statement__ = 613;
      stan::math::validate_non_negative_index("v_oos", "1", 1);
      current_statement__ = 614;
      probs_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 614;
      probs_1dim__ = (stan::math::logical_eq(inflation, 2) ? 3 : 0);
      current_statement__ = 614;
      stan::math::validate_non_negative_index("probs",
        "inflation == 2 ? 3 : 0", probs_1dim__);
      current_statement__ = 615;
      theta_oos_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 615;
      theta_oos_1dim__ = (stan::math::logical_neq(likelihood, 1) ? M_oos : 0);
      current_statement__ = 615;
      stan::math::validate_non_negative_index("theta_oos",
        "likelihood != 1 ? M_oos : 0", theta_oos_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = beta0_1dim__ + P + lambda_HS_1dim__ + z_c2_1dim__ +
      z_tau_1dim__ + length_v + sigma_v_1dim__ + nu_1dim__ + psi_d_1dim__ +
      lambda_1dim__ + s_raw_1dim__ + sigma_s_1dim__ + (t_raw_1dim__ *
      t_raw_2dim__) + sigma_t_1dim__ + w_1dim__ + p_1dim__ + gamma_p0_1dim__
      + gamma_p1_1dim__ + gamma0_p0_1dim__ + gamma0_p1_1dim__;
  }
  inline std::string model_name() const final {
    return "model_global";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_global_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> beta0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      beta0 = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(beta0_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 2;
      z_beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_HS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_HS_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      lambda_HS = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, lambda_HS_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_c2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_c2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      z_c2 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               z_c2_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> z_tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      z_tau = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                z_tau_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> v_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(length_v, DUMMY_VAR__);
      current_statement__ = 6;
      v_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(length_v);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_v_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      sigma_v = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_v_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      nu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             nu_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_d_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      psi_d = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                psi_d_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 lambda_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> s_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      s_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(s_raw_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_s_1dim__,
          DUMMY_VAR__);
      current_statement__ = 12;
      sigma_s = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_s_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,-1> t_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(t_raw_1dim__,
          t_raw_2dim__, DUMMY_VAR__);
      current_statement__ = 13;
      t_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(t_raw_1dim__,
                t_raw_2dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_t_1dim__,
          DUMMY_VAR__);
      current_statement__ = 14;
      sigma_t = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_t_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(w_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      w = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, w_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      current_statement__ = 16;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, p_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 17;
      gamma_p0 = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p0_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 18;
      gamma_p1 = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 19;
      gamma0_p0 = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p0_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 20;
      gamma0_p1 = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p1_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(tau_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> c2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(c2_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_tilde =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_tilde_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_is, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> b1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_is, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> a1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_is, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> mu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_is, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> phi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(phi_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda1_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda2_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> b2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(b2_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> a2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(a2_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p0_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p1_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(length_v, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> t =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(t_1dim__, t_2dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> reffs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_is, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> reffs_oos =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M_oos, DUMMY_VAR__);
      current_statement__ = 56;
      if (stan::math::logical_eq(prior_coeff, 0)) {
        current_statement__ = 54;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 53;
        if (stan::math::logical_eq(prior_coeff, 1)) {
          current_statement__ = 48;
          stan::model::assign(tau, (tau0 *
            stan::model::rvalue(z_tau, "z_tau", stan::model::index_uni(1))),
            "assigning variable tau", stan::model::index_uni(1));
          current_statement__ = 49;
          stan::model::assign(c2, (slab_scale2 *
            stan::model::rvalue(z_c2, "z_c2", stan::model::index_uni(1))),
            "assigning variable c2", stan::model::index_uni(1));
          current_statement__ = 50;
          stan::model::assign(lambda_tilde,
            stan::math::sqrt(
              stan::math::elt_divide(
                stan::math::multiply(
                  stan::model::rvalue(c2, "c2", stan::model::index_uni(1)),
                  stan::math::square(lambda_HS)),
                stan::math::add(
                  stan::model::rvalue(c2, "c2", stan::model::index_uni(1)),
                  stan::math::multiply(
                    stan::math::square(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1))),
                    stan::math::square(lambda_HS))))),
            "assigning variable lambda_tilde");
          current_statement__ = 51;
          stan::model::assign(beta,
            stan::math::elt_multiply(
              stan::math::multiply(
                stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                lambda_tilde), z_beta), "assigning variable beta");
        }
      }
      current_statement__ = 67;
      if (stan::math::logical_eq(spatio_temporal, 0)) {
        current_statement__ = 65;
        if (stan::math::logical_eq(prior_reff, 0)) {
          current_statement__ = 63;
          stan::model::assign(v,
            stan::math::multiply(
              stan::model::rvalue(sigma_v, "sigma_v",
                stan::model::index_uni(1)), v_raw), "assigning variable v");
        } else {
          current_statement__ = 62;
          if (stan::math::logical_eq(prior_reff, 1)) {
            current_statement__ = 60;
            stan::model::assign(v,
              stan::math::multiply(
                stan::model::rvalue(sigma_v, "sigma_v",
                  stan::model::index_uni(1)), v_raw), "assigning variable v");
          } else {
            current_statement__ = 59;
            if (stan::math::logical_eq(prior_reff, 2)) {
              current_statement__ = 57;
              stan::model::assign(v,
                stan::math::elt_multiply(
                  stan::math::multiply(stan::math::sqrt(psi_d),
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(1))), v_raw),
                "assigning variable v");
            }
          }
        }
      }
      current_statement__ = 122;
      if ((stan::math::primitive_value(stan::math::logical_eq(spatial_err, 0))
          &&
          stan::math::primitive_value(stan::math::logical_eq(temporal_err, 0)))) {
        current_statement__ = 117;
        stan::model::assign(reffs, v, "assigning variable reffs");
        current_statement__ = 120;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 118;
          stan::model::assign(reffs_oos, 0, "assigning variable reffs_oos",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 78;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 1))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 0)))) {
          current_statement__ = 70;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 68;
            stan::model::assign(s,
              ((stan::model::rvalue(sigma_s, "sigma_s",
                  stan::model::index_uni(1)) *
              stan::model::rvalue(s_raw, "s_raw", stan::model::index_uni(i)))
              /
              stan::model::rvalue(scales_ICAR, "scales_ICAR",
                stan::model::index_uni(i))), "assigning variable s",
              stan::model::index_uni(
                stan::model::rvalue(indices_spat, "indices_spat",
                  stan::model::index_uni(i))));
          }
          current_statement__ = 73;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 71;
            stan::model::assign(reffs,
              (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
              stan::model::rvalue(s, "s",
                stan::model::index_uni(
                  stan::model::rvalue(indices_is, "indices_is",
                    stan::model::index_uni(i))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 76;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 74;
            stan::model::assign(reffs_oos,
              stan::model::rvalue(s, "s",
                stan::model::index_uni(
                  stan::model::rvalue(indices_oos, "indices_oos",
                    stan::model::index_uni(i)))),
              "assigning variable reffs_oos", stan::model::index_uni(i));
          }
        }
        current_statement__ = 95;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 0))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 1)))) {
          current_statement__ = 79;
          stan::model::assign(t,
            stan::math::divide(
              stan::math::multiply(
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)), t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 82;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 80;
            stan::model::assign(reffs,
              (stan::model::rvalue(v, "v",
                 stan::model::index_uni(
                   stan::model::rvalue(indices_temp, "indices_temp",
                     stan::model::index_uni(
                       stan::model::rvalue(indices_is, "indices_is",
                         stan::model::index_uni(i))),
                     stan::model::index_uni(1)))) +
              stan::model::rvalue(t, "t",
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(2))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 93;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 85;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 83;
              stan::model::assign(reffs_oos, 0,
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 88;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 2)) {
              current_statement__ = 86;
              stan::model::assign(reffs_oos,
                stan::model::rvalue(v, "v",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1)))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 91;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 3)) {
              current_statement__ = 89;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(v, "v",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 115;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 1))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 1)))) {
          current_statement__ = 96;
          stan::model::assign(t,
            stan::math::divide(
              stan::math::multiply(
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)), t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 99;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 97;
            stan::model::assign(s,
              ((stan::model::rvalue(sigma_s, "sigma_s",
                  stan::model::index_uni(1)) *
              stan::model::rvalue(s_raw, "s_raw",
                stan::model::index_uni(
                  stan::model::rvalue(indices_spat, "indices_spat",
                    stan::model::index_uni(i))))) /
              stan::model::rvalue(scales_ICAR, "scales_ICAR",
                stan::model::index_uni(
                  stan::model::rvalue(indices_spat, "indices_spat",
                    stan::model::index_uni(i))))), "assigning variable s",
              stan::model::index_uni(i));
          }
          current_statement__ = 102;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 100;
            stan::model::assign(reffs,
              (stan::model::rvalue(s, "s",
                 stan::model::index_uni(
                   stan::model::rvalue(indices_temp, "indices_temp",
                     stan::model::index_uni(
                       stan::model::rvalue(indices_is, "indices_is",
                         stan::model::index_uni(i))),
                     stan::model::index_uni(1)))) +
              stan::model::rvalue(t, "t",
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(2))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 113;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 105;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 103;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 108;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 2)) {
              current_statement__ = 106;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 111;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 3)) {
              current_statement__ = 109;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
          }
        }
      }
      current_statement__ = 212;
      if (stan::math::logical_eq(likelihood, 0)) {
        current_statement__ = 210;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 200;
          if (stan::math::logical_eq(intercept, 0)) {
            current_statement__ = 198;
            stan::model::assign(mu,
              stan::math::inv_logit(
                (stan::math::multiply(
                   stan::model::rvalue(X, "X", stan::model::index_uni(i),
                     stan::model::index_omni()), beta) +
                stan::model::rvalue(reffs, "reffs", stan::model::index_uni(i)))),
              "assigning variable mu", stan::model::index_uni(i));
          } else {
            current_statement__ = 196;
            stan::model::assign(mu,
              stan::math::inv_logit(
                ((stan::model::rvalue(beta0, "beta0",
                    stan::model::index_uni(1)) +
                stan::math::multiply(
                  stan::model::rvalue(X, "X", stan::model::index_uni(i),
                    stan::model::index_omni()), beta)) +
                stan::model::rvalue(reffs, "reffs", stan::model::index_uni(i)))),
              "assigning variable mu", stan::model::index_uni(i));
          }
          current_statement__ = 201;
          stan::model::assign(theta,
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            "assigning variable theta", stan::model::index_uni(i));
          current_statement__ = 208;
          if (stan::math::logical_eq(deff, 0)) {
            current_statement__ = 205;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              / stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              - 1)), "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 206;
            stan::model::assign(a1,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              / stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              - 1)), "assigning variable a1", stan::model::index_uni(i));
          } else {
            current_statement__ = 202;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
              stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
              "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 203;
            stan::model::assign(a1,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
              "assigning variable a1", stan::model::index_uni(i));
          }
        }
      } else {
        current_statement__ = 195;
        if (stan::math::logical_eq(likelihood, 1)) {
          current_statement__ = 193;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 183;
            if (stan::math::logical_eq(intercept, 0)) {
              current_statement__ = 181;
              stan::model::assign(lambda2,
                stan::math::inv_logit(
                  (stan::math::multiply(
                     stan::model::rvalue(X, "X", stan::model::index_uni(i),
                       stan::model::index_omni()), beta) +
                  stan::model::rvalue(reffs, "reffs",
                    stan::model::index_uni(i)))),
                "assigning variable lambda2", stan::model::index_uni(i));
            } else {
              current_statement__ = 179;
              stan::model::assign(lambda2,
                stan::math::inv_logit(
                  ((stan::model::rvalue(beta0, "beta0",
                      stan::model::index_uni(1)) +
                  stan::math::multiply(
                    stan::model::rvalue(X, "X", stan::model::index_uni(i),
                      stan::model::index_omni()), beta)) +
                  stan::model::rvalue(reffs, "reffs",
                    stan::model::index_uni(i)))),
                "assigning variable lambda2", stan::model::index_uni(i));
            }
            current_statement__ = 184;
            stan::model::assign(lambda1,
              (stan::model::rvalue(lambda2, "lambda2",
                 stan::model::index_uni(i)) +
              (stan::model::rvalue(w, "w", stan::model::index_uni(1)) *
              stan::math::fmin(((1 -
                stan::model::rvalue(lambda2, "lambda2",
                  stan::model::index_uni(i))) /
                stan::model::rvalue(p, "p", stan::model::index_uni(1))),
                stan::math::sqrt(
                  (stan::model::rvalue(disp, "disp",
                     stan::model::index_uni(i)) /
                  (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                  (1 -
                  stan::model::rvalue(p, "p", stan::model::index_uni(1))))))))),
              "assigning variable lambda1", stan::model::index_uni(i));
            current_statement__ = 185;
            stan::model::assign(mu,
              ((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
              stan::model::rvalue(lambda1, "lambda1",
                stan::model::index_uni(i))) + ((1 -
              stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
              stan::model::rvalue(lambda2, "lambda2",
                stan::model::index_uni(i)))), "assigning variable mu",
              stan::model::index_uni(i));
            current_statement__ = 186;
            stan::model::assign(theta,
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              "assigning variable theta", stan::model::index_uni(i));
            current_statement__ = 187;
            stan::model::assign(phi,
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              - stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              / (stan::model::rvalue(disp, "disp", stan::model::index_uni(i))
              - (((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
              (1 - stan::model::rvalue(p, "p", stan::model::index_uni(1)))) *
              stan::math::pow(
                stan::model::rvalue(w, "w", stan::model::index_uni(1)), 2)) *
              stan::math::pow(
                stan::math::fmin(((1 -
                  stan::model::rvalue(lambda2, "lambda2",
                    stan::model::index_uni(i))) /
                  stan::model::rvalue(p, "p", stan::model::index_uni(1))),
                  stan::math::sqrt(
                    (stan::model::rvalue(disp, "disp",
                       stan::model::index_uni(i)) /
                    (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                    (1 -
                    stan::model::rvalue(p, "p", stan::model::index_uni(1))))))),
                2)))), "assigning variable phi", stan::model::index_uni(i));
            current_statement__ = 188;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(lambda2, "lambda2",
                stan::model::index_uni(i))) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 189;
            stan::model::assign(a1,
              (stan::model::rvalue(lambda2, "lambda2",
                 stan::model::index_uni(i)) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable a1", stan::model::index_uni(i));
            current_statement__ = 190;
            stan::model::assign(b2, ((1 -
              stan::model::rvalue(lambda1, "lambda1",
                stan::model::index_uni(i))) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable b2", stan::model::index_uni(i));
            current_statement__ = 191;
            stan::model::assign(a2,
              (stan::model::rvalue(lambda1, "lambda1",
                 stan::model::index_uni(i)) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable a2", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 178;
          if (stan::math::logical_eq(likelihood, 2)) {
            current_statement__ = 176;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 144;
              if (stan::math::logical_eq(intercept, 0)) {
                current_statement__ = 142;
                stan::model::assign(mu,
                  stan::math::inv_logit(
                    (stan::math::multiply(
                       stan::model::rvalue(X, "X", stan::model::index_uni(i),
                         stan::model::index_omni()), beta) +
                    stan::model::rvalue(reffs, "reffs",
                      stan::model::index_uni(i)))), "assigning variable mu",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 140;
                stan::model::assign(mu,
                  stan::math::inv_logit(
                    ((stan::model::rvalue(beta0, "beta0",
                        stan::model::index_uni(1)) +
                    stan::math::multiply(
                      stan::model::rvalue(X, "X", stan::model::index_uni(i),
                        stan::model::index_omni()), beta)) +
                    stan::model::rvalue(reffs, "reffs",
                      stan::model::index_uni(i)))), "assigning variable mu",
                  stan::model::index_uni(i));
              }
              current_statement__ = 151;
              if (stan::math::logical_neq(inflation, 1)) {
                current_statement__ = 149;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 147;
                  stan::model::assign(p0,
                    stan::math::inv_logit(
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0)),
                    "assigning variable p0", stan::model::index_uni(i));
                } else {
                  current_statement__ = 145;
                  stan::model::assign(p0,
                    stan::math::inv_logit(
                      (stan::model::rvalue(gamma0_p0, "gamma0_p0",
                         stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0))),
                    "assigning variable p0", stan::model::index_uni(i));
                }
              }
              current_statement__ = 158;
              if (stan::math::logical_neq(inflation, 0)) {
                current_statement__ = 156;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 154;
                  stan::model::assign(p1,
                    stan::math::inv_logit(
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p1)),
                    "assigning variable p1", stan::model::index_uni(i));
                } else {
                  current_statement__ = 152;
                  stan::model::assign(p1,
                    stan::math::inv_logit(
                      (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                         stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p1))),
                    "assigning variable p1", stan::model::index_uni(i));
                }
              }
              current_statement__ = 167;
              if (stan::math::logical_eq(inflation, 0)) {
                current_statement__ = 165;
                stan::model::assign(theta, ((1 -
                  stan::model::rvalue(p0, "p0", stan::model::index_uni(i))) *
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
                  "assigning variable theta", stan::model::index_uni(i));
              } else {
                current_statement__ = 164;
                if (stan::math::logical_eq(inflation, 1)) {
                  current_statement__ = 162;
                  stan::model::assign(theta, (((1 -
                    stan::model::rvalue(p1, "p1", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    +
                    stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                    "assigning variable theta", stan::model::index_uni(i));
                } else {
                  current_statement__ = 161;
                  if (stan::math::logical_eq(inflation, 2)) {
                    current_statement__ = 159;
                    stan::model::assign(theta, ((((1 -
                      stan::model::rvalue(p0, "p0", stan::model::index_uni(i)))
                      -
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                      +
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                      "assigning variable theta", stan::model::index_uni(i));
                  }
                }
              }
              current_statement__ = 174;
              if (stan::math::logical_eq(deff, 0)) {
                current_statement__ = 171;
                stan::model::assign(b1, ((1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
                  (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                  * (1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                  /
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
                  - 1)), "assigning variable b1", stan::model::index_uni(i));
                current_statement__ = 172;
                stan::model::assign(a1,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                  * (1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                  /
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
                  - 1)), "assigning variable a1", stan::model::index_uni(i));
              } else {
                current_statement__ = 168;
                stan::model::assign(b1, ((1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
                  "assigning variable b1", stan::model::index_uni(i));
                current_statement__ = 169;
                stan::model::assign(a1,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
                  "assigning variable a1", stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 139;
            if (stan::math::logical_eq(likelihood, 3)) {
              current_statement__ = 137;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 127;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 125;
                  stan::model::assign(mu,
                    stan::math::inv_logit(
                      (stan::math::multiply(
                         stan::model::rvalue(X, "X",
                           stan::model::index_uni(i),
                           stan::model::index_omni()), beta) +
                      stan::model::rvalue(reffs, "reffs",
                        stan::model::index_uni(i)))),
                    "assigning variable mu", stan::model::index_uni(i));
                } else {
                  current_statement__ = 123;
                  stan::model::assign(mu,
                    stan::math::inv_logit(
                      ((stan::model::rvalue(beta0, "beta0",
                          stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), beta)) +
                      stan::model::rvalue(reffs, "reffs",
                        stan::model::index_uni(i)))),
                    "assigning variable mu", stan::model::index_uni(i));
                }
                current_statement__ = 128;
                stan::model::assign(theta,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  (1 -
                  stan::math::pow((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
                    stan::model::rvalue(m_d, "m_d", stan::model::index_uni(i))))),
                  "assigning variable theta", stan::model::index_uni(i));
                current_statement__ = 135;
                if (stan::math::logical_eq(deff, 0)) {
                  current_statement__ = 132;
                  stan::model::assign(b1, ((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    *
                    (((stan::model::rvalue(mu, "mu",
                         stan::model::index_uni(i)) * (1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                    /
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))) - 1)),
                    "assigning variable b1", stan::model::index_uni(i));
                  current_statement__ = 133;
                  stan::model::assign(a1,
                    (stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                    *
                    (((stan::model::rvalue(mu, "mu",
                         stan::model::index_uni(i)) * (1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                    /
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))) - 1)),
                    "assigning variable a1", stan::model::index_uni(i));
                } else {
                  current_statement__ = 129;
                  stan::model::assign(b1, ((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))), "assigning variable b1",
                    stan::model::index_uni(i));
                  current_statement__ = 130;
                  stan::model::assign(a1,
                    (stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                    *
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))), "assigning variable a1",
                    stan::model::index_uni(i));
                }
              }
            }
          }
        }
      }
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "c2", c2, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "lambda_tilde",
        lambda_tilde, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "theta", theta, 0);
      current_statement__ = 25;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "b1", b1, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "a1", a1, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 28;
      stan::math::check_less_or_equal(function__, "mu", mu, 1);
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "lambda1", lambda1, 0);
      current_statement__ = 30;
      stan::math::check_less_or_equal(function__, "lambda1", lambda1, 1);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "lambda2", lambda2, 0);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "lambda2", lambda2, 1);
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "b2", b2, 0);
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "a2", a2, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "p0", p0, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "p0", p0, 1);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "p1", p1, 0);
      current_statement__ = 35;
      stan::math::check_less_or_equal(function__, "p1", p1, 1);
      {
        int pos = std::numeric_limits<int>::min();
        current_statement__ = 379;
        pos = 1;
        current_statement__ = 382;
        if (stan::math::logical_eq(intercept, 1)) {
          current_statement__ = 380;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(beta0, "beta0",
                             stan::model::index_uni(1)), 0, sigma_coeff));
        }
        current_statement__ = 391;
        if (stan::math::logical_eq(prior_coeff, 0)) {
          current_statement__ = 389;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(z_beta, 0,
                           sigma_coeff));
        } else {
          current_statement__ = 388;
          if (stan::math::logical_eq(prior_coeff, 1)) {
            current_statement__ = 383;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(z_beta, 0, 1));
            current_statement__ = 384;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(lambda_HS, 0, 1));
            current_statement__ = 385;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                             stan::model::rvalue(z_tau, "z_tau",
                               stan::model::index_uni(1)), 0, 1));
            current_statement__ = 386;
            lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(
                             stan::model::rvalue(z_c2, "z_c2",
                               stan::model::index_uni(1)), half_nu, half_nu));
          }
        }
        current_statement__ = 409;
        if (stan::math::logical_eq(spatio_temporal, 0)) {
          current_statement__ = 407;
          if (stan::math::logical_eq(prior_reff, 0)) {
            current_statement__ = 403;
            lp_accum__.add(stan::math::std_normal_lpdf<propto__>(v_raw));
            current_statement__ = 404;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(sigma_v, "sigma_v",
                               stan::model::index_uni(1)), 0, sigma_unstr));
            current_statement__ = 405;
            if (stan::math::logical_lt(
                  stan::model::rvalue(sigma_v, "sigma_v",
                    stan::model::index_uni(1)), 0)) {
              current_statement__ = 405;
              lp_accum__.add(stan::math::negative_infinity());
            } else {
              current_statement__ = 405;
              lp_accum__.add(-stan::math::normal_lccdf(0, 0, sigma_unstr));
            }
          } else {
            current_statement__ = 402;
            if (stan::math::logical_eq(prior_reff, 1)) {
              current_statement__ = 397;
              lp_accum__.add(stan::math::student_t_lpdf<propto__>(v_raw,
                               stan::model::rvalue(nu, "nu",
                                 stan::model::index_uni(1)), 0, 1));
              current_statement__ = 398;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(sigma_v, "sigma_v",
                                 stan::model::index_uni(1)), 0, sigma_unstr));
              current_statement__ = 399;
              if (stan::math::logical_lt(
                    stan::model::rvalue(sigma_v, "sigma_v",
                      stan::model::index_uni(1)), 0)) {
                current_statement__ = 399;
                lp_accum__.add(stan::math::negative_infinity());
              } else {
                current_statement__ = 399;
                lp_accum__.add(-stan::math::normal_lccdf(0, 0, sigma_unstr));
              }
              current_statement__ = 400;
              lp_accum__.add(stan::math::exponential_lpdf<propto__>(
                               stan::model::rvalue(nu, "nu",
                                 stan::model::index_uni(1)), 0.1));
            } else {
              current_statement__ = 396;
              if (stan::math::logical_eq(prior_reff, 2)) {
                current_statement__ = 392;
                lp_accum__.add(stan::math::std_normal_lpdf<propto__>(v_raw));
                current_statement__ = 393;
                lp_accum__.add(stan::math::gamma_lpdf<propto__>(psi_d, 0.5, 1));
                current_statement__ = 394;
                lp_accum__.add(stan::math::normal_lpdf<propto__>(
                                 stan::model::rvalue(lambda, "lambda",
                                   stan::model::index_uni(1)), 0, sigma_unstr));
              }
            }
          }
        }
        current_statement__ = 423;
        if (stan::math::logical_eq(spatial_err, 1)) {
          current_statement__ = 410;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(sigma_s, "sigma_s",
                             stan::model::index_uni(1)), 0, 2.5));
          current_statement__ = 411;
          if (stan::math::logical_lt(
                stan::model::rvalue(sigma_s, "sigma_s",
                  stan::model::index_uni(1)), 0)) {
            current_statement__ = 411;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 411;
            lp_accum__.add(-stan::math::normal_lccdf(0, 0, 2.5));
          }
          current_statement__ = 420;
          for (int k = 1; k <= N_comp; ++k) {
            current_statement__ = 414;
            if (stan::math::logical_eq(
                  stan::model::rvalue(dim_c, "dim_c",
                    stan::model::index_uni(k)), 1)) {
              current_statement__ = 412;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::math::segment(s_raw, pos,
                                 stan::model::rvalue(dim_c, "dim_c",
                                   stan::model::index_uni(k))), 0, 1));
            }
            current_statement__ = 417;
            if (stan::math::logical_gt(
                  stan::model::rvalue(dim_c, "dim_c",
                    stan::model::index_uni(k)), 1)) {
              current_statement__ = 415;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::math::sum(
                                 stan::math::segment(s_raw, pos,
                                   stan::model::rvalue(dim_c, "dim_c",
                                     stan::model::index_uni(k)))), 0, (0.001
                               *
                               stan::model::rvalue(dim_c, "dim_c",
                                 stan::model::index_uni(k)))));
            }
            current_statement__ = 418;
            pos = (pos +
              stan::model::rvalue(dim_c, "dim_c", stan::model::index_uni(k)));
          }
          current_statement__ = 421;
          lp_accum__.add((-0.5 *
            stan::math::dot_self(
              stan::math::subtract(
                stan::model::rvalue(s_raw, "s_raw",
                  stan::model::index_multi(node1)),
                stan::model::rvalue(s_raw, "s_raw",
                  stan::model::index_multi(node2))))));
        }
        current_statement__ = 431;
        if (stan::math::logical_eq(temporal_err, 1)) {
          current_statement__ = 424;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(sigma_t, "sigma_t",
                             stan::model::index_uni(1)), 0, 2.5));
          current_statement__ = 425;
          if (stan::math::logical_lt(
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)), 0)) {
            current_statement__ = 425;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 425;
            lp_accum__.add(-stan::math::normal_lccdf(0, 0, 2.5));
          }
          current_statement__ = 429;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 426;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::math::sum(
                               stan::model::rvalue(t_raw, "t_raw",
                                 stan::model::index_uni(i),
                                 stan::model::index_omni())), 0, (0.001 * TP)));
            current_statement__ = 427;
            lp_accum__.add((-0.5 *
              stan::math::dot_self(
                stan::math::subtract(
                  stan::model::rvalue(t_raw, "t_raw",
                    stan::model::index_uni(i),
                    stan::model::index_multi(node1_t)),
                  stan::model::rvalue(t_raw, "t_raw",
                    stan::model::index_uni(i),
                    stan::model::index_multi(node2_t))))));
          }
        }
        current_statement__ = 435;
        if (stan::math::logical_eq(likelihood, 1)) {
          current_statement__ = 432;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(p, "p",
                             stan::model::index_uni(1)), 2, 2));
          current_statement__ = 433;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(w, "w",
                             stan::model::index_uni(1)), 0.001, 0.999));
        }
        current_statement__ = 449;
        if (stan::math::logical_eq(likelihood, 2)) {
          current_statement__ = 441;
          if (stan::math::logical_neq(inflation, 1)) {
            current_statement__ = 436;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_p0, 0, 2.5));
            current_statement__ = 439;
            if (stan::math::logical_eq(intercept, 1)) {
              current_statement__ = 437;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(gamma0_p0, "gamma0_p0",
                                 stan::model::index_uni(1)), 0, 2.5));
            }
          }
          current_statement__ = 447;
          if (stan::math::logical_neq(inflation, 0)) {
            current_statement__ = 442;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma_p1, 0, 2.5));
            current_statement__ = 445;
            if (stan::math::logical_eq(intercept, 1)) {
              current_statement__ = 443;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(gamma0_p1, "gamma0_p1",
                                 stan::model::index_uni(1)), 0, 2.5));
            }
          }
        }
        current_statement__ = 489;
        if (stan::math::logical_eq(likelihood, 0)) {
          current_statement__ = 487;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 485;
            lp_accum__.add(stan::math::beta_lpdf<false>(
                             stan::model::rvalue(y, "y",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(a1, "a1",
                               stan::model::index_uni(i)),
                             stan::model::rvalue(b1, "b1",
                               stan::model::index_uni(i))));
          }
        } else {
          current_statement__ = 484;
          if (stan::math::logical_eq(likelihood, 1)) {
            current_statement__ = 482;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 480;
              lp_accum__.add(stan::math::log_mix(
                               stan::model::rvalue(p, "p",
                                 stan::model::index_uni(1)),
                               stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(y, "y",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(a2, "a2",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(b2, "b2",
                                   stan::model::index_uni(i))),
                               stan::math::beta_lpdf<false>(
                                 stan::model::rvalue(y, "y",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(a1, "a1",
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(b1, "b1",
                                   stan::model::index_uni(i)))));
            }
          } else {
            current_statement__ = 479;
            if (stan::math::logical_eq(likelihood, 2)) {
              current_statement__ = 477;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 475;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(y, "y",
                           stan::model::index_uni(i)), 0))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_neq(inflation, 1)))) {
                  current_statement__ = 473;
                  lp_accum__.add(stan::math::log(
                                   stan::model::rvalue(p0, "p0",
                                     stan::model::index_uni(i))));
                } else {
                  current_statement__ = 472;
                  if ((stan::math::primitive_value(
                         stan::math::logical_eq(
                           stan::model::rvalue(y, "y",
                             stan::model::index_uni(i)), 1))
                      &&
                      stan::math::primitive_value(
                        stan::math::logical_neq(inflation, 0)))) {
                    current_statement__ = 470;
                    lp_accum__.add(stan::math::log(
                                     stan::model::rvalue(p1, "p1",
                                       stan::model::index_uni(i))));
                  } else {
                    current_statement__ = 459;
                    lp_accum__.add(stan::math::beta_lpdf<false>(
                                     stan::model::rvalue(y, "y",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(a1, "a1",
                                       stan::model::index_uni(i)),
                                     stan::model::rvalue(b1, "b1",
                                       stan::model::index_uni(i))));
                    current_statement__ = 468;
                    if (stan::math::logical_eq(inflation, 0)) {
                      current_statement__ = 466;
                      lp_accum__.add(stan::math::log((1 -
                                       stan::model::rvalue(p0, "p0",
                                         stan::model::index_uni(i)))));
                    } else {
                      current_statement__ = 465;
                      if (stan::math::logical_eq(inflation, 1)) {
                        current_statement__ = 463;
                        lp_accum__.add(stan::math::log((1 -
                                         stan::model::rvalue(p1, "p1",
                                           stan::model::index_uni(i)))));
                      } else {
                        current_statement__ = 462;
                        if (stan::math::logical_eq(inflation, 2)) {
                          current_statement__ = 460;
                          lp_accum__.add(stan::math::log(((1 -
                                           stan::model::rvalue(p0, "p0",
                                             stan::model::index_uni(i))) -
                                           stan::model::rvalue(p1, "p1",
                                             stan::model::index_uni(i)))));
                        }
                      }
                    }
                  }
                }
              }
            } else {
              current_statement__ = 458;
              if (stan::math::logical_eq(likelihood, 3)) {
                current_statement__ = 456;
                for (int i = 1; i <= M_is; ++i) {
                  current_statement__ = 454;
                  if (stan::math::logical_eq(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        0)) {
                    current_statement__ = 452;
                    lp_accum__.add((stan::model::rvalue(m_d, "m_d",
                                      stan::model::index_uni(i)) *
                      stan::math::log((1 -
                        stan::model::rvalue(mu, "mu",
                          stan::model::index_uni(i))))));
                  } else {
                    current_statement__ = 450;
                    lp_accum__.add((stan::math::log((1 -
                                      stan::math::pow((1 -
                                        stan::model::rvalue(mu, "mu",
                                          stan::model::index_uni(i))),
                                        stan::model::rvalue(m_d, "m_d",
                                          stan::model::index_uni(i))))) +
                      stan::math::beta_lpdf<false>(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(a1, "a1",
                          stan::model::index_uni(i)),
                        stan::model::rvalue(b1, "b1",
                          stan::model::index_uni(i)))));
                  }
                }
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_global_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> beta0 =
        Eigen::Matrix<double,-1,1>::Constant(beta0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      beta0 = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(beta0_1dim__);
      Eigen::Matrix<double,-1,1> z_beta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z_beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(P);
      Eigen::Matrix<double,-1,1> lambda_HS =
        Eigen::Matrix<double,-1,1>::Constant(lambda_HS_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      lambda_HS = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                    lp__, lambda_HS_1dim__);
      Eigen::Matrix<double,-1,1> z_c2 =
        Eigen::Matrix<double,-1,1>::Constant(z_c2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      z_c2 = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
               z_c2_1dim__);
      Eigen::Matrix<double,-1,1> z_tau =
        Eigen::Matrix<double,-1,1>::Constant(z_tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      z_tau = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                z_tau_1dim__);
      Eigen::Matrix<double,-1,1> v_raw =
        Eigen::Matrix<double,-1,1>::Constant(length_v,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      v_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(length_v);
      Eigen::Matrix<double,-1,1> sigma_v =
        Eigen::Matrix<double,-1,1>::Constant(sigma_v_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sigma_v = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_v_1dim__);
      Eigen::Matrix<double,-1,1> nu =
        Eigen::Matrix<double,-1,1>::Constant(nu_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      nu = in__.template read_constrain_lb<
             Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
             nu_1dim__);
      Eigen::Matrix<double,-1,1> psi_d =
        Eigen::Matrix<double,-1,1>::Constant(psi_d_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      psi_d = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                psi_d_1dim__);
      Eigen::Matrix<double,-1,1> lambda =
        Eigen::Matrix<double,-1,1>::Constant(lambda_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      lambda = in__.template read_constrain_lb<
                 Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                 lambda_1dim__);
      Eigen::Matrix<double,-1,1> s_raw =
        Eigen::Matrix<double,-1,1>::Constant(s_raw_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      s_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,1>>(s_raw_1dim__);
      Eigen::Matrix<double,-1,1> sigma_s =
        Eigen::Matrix<double,-1,1>::Constant(sigma_s_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      sigma_s = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_s_1dim__);
      Eigen::Matrix<double,-1,-1> t_raw =
        Eigen::Matrix<double,-1,-1>::Constant(t_raw_1dim__, t_raw_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      t_raw = in__.template read<
                Eigen::Matrix<local_scalar_t__,-1,-1>>(t_raw_1dim__,
                t_raw_2dim__);
      Eigen::Matrix<double,-1,1> sigma_t =
        Eigen::Matrix<double,-1,1>::Constant(sigma_t_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 14;
      sigma_t = in__.template read_constrain_lb<
                  Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                  sigma_t_1dim__);
      Eigen::Matrix<double,-1,1> w =
        Eigen::Matrix<double,-1,1>::Constant(w_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 15;
      w = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, w_1dim__);
      Eigen::Matrix<double,-1,1> p =
        Eigen::Matrix<double,-1,1>::Constant(p_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 16;
      p = in__.template read_constrain_lub<
            Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.001, 0.999,
            lp__, p_1dim__);
      Eigen::Matrix<double,-1,1> gamma_p0 =
        Eigen::Matrix<double,-1,1>::Constant(gamma_p0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 17;
      gamma_p0 = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p0_1dim__);
      Eigen::Matrix<double,-1,1> gamma_p1 =
        Eigen::Matrix<double,-1,1>::Constant(gamma_p1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 18;
      gamma_p1 = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p1_1dim__);
      Eigen::Matrix<double,-1,1> gamma0_p0 =
        Eigen::Matrix<double,-1,1>::Constant(gamma0_p0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      gamma0_p0 = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p0_1dim__);
      Eigen::Matrix<double,-1,1> gamma0_p1 =
        Eigen::Matrix<double,-1,1>::Constant(gamma0_p1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 20;
      gamma0_p1 = in__.template read<
                    Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p1_1dim__);
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(P,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(tau_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> c2 =
        Eigen::Matrix<double,-1,1>::Constant(c2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda_tilde =
        Eigen::Matrix<double,-1,1>::Constant(lambda_tilde_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> b1 =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> a1 =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> phi =
        Eigen::Matrix<double,-1,1>::Constant(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda1 =
        Eigen::Matrix<double,-1,1>::Constant(lambda1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> lambda2 =
        Eigen::Matrix<double,-1,1>::Constant(lambda2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> b2 =
        Eigen::Matrix<double,-1,1>::Constant(b2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> a2 =
        Eigen::Matrix<double,-1,1>::Constant(a2_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p0 =
        Eigen::Matrix<double,-1,1>::Constant(p0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p1 =
        Eigen::Matrix<double,-1,1>::Constant(p1_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> v =
        Eigen::Matrix<double,-1,1>::Constant(length_v,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> s =
        Eigen::Matrix<double,-1,1>::Constant(s_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> t =
        Eigen::Matrix<double,-1,-1>::Constant(t_1dim__, t_2dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> reffs =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> reffs_oos =
        Eigen::Matrix<double,-1,1>::Constant(M_oos,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(beta0);
      out__.write(z_beta);
      out__.write(lambda_HS);
      out__.write(z_c2);
      out__.write(z_tau);
      out__.write(v_raw);
      out__.write(sigma_v);
      out__.write(nu);
      out__.write(psi_d);
      out__.write(lambda);
      out__.write(s_raw);
      out__.write(sigma_s);
      out__.write(t_raw);
      out__.write(sigma_t);
      out__.write(w);
      out__.write(p);
      out__.write(gamma_p0);
      out__.write(gamma_p1);
      out__.write(gamma0_p0);
      out__.write(gamma0_p1);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 56;
      if (stan::math::logical_eq(prior_coeff, 0)) {
        current_statement__ = 54;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 53;
        if (stan::math::logical_eq(prior_coeff, 1)) {
          current_statement__ = 48;
          stan::model::assign(tau, (tau0 *
            stan::model::rvalue(z_tau, "z_tau", stan::model::index_uni(1))),
            "assigning variable tau", stan::model::index_uni(1));
          current_statement__ = 49;
          stan::model::assign(c2, (slab_scale2 *
            stan::model::rvalue(z_c2, "z_c2", stan::model::index_uni(1))),
            "assigning variable c2", stan::model::index_uni(1));
          current_statement__ = 50;
          stan::model::assign(lambda_tilde,
            stan::math::sqrt(
              stan::math::elt_divide(
                stan::math::multiply(
                  stan::model::rvalue(c2, "c2", stan::model::index_uni(1)),
                  stan::math::square(lambda_HS)),
                stan::math::add(
                  stan::model::rvalue(c2, "c2", stan::model::index_uni(1)),
                  stan::math::multiply(
                    stan::math::square(
                      stan::model::rvalue(tau, "tau",
                        stan::model::index_uni(1))),
                    stan::math::square(lambda_HS))))),
            "assigning variable lambda_tilde");
          current_statement__ = 51;
          stan::model::assign(beta,
            stan::math::elt_multiply(
              stan::math::multiply(
                stan::model::rvalue(tau, "tau", stan::model::index_uni(1)),
                lambda_tilde), z_beta), "assigning variable beta");
        }
      }
      current_statement__ = 67;
      if (stan::math::logical_eq(spatio_temporal, 0)) {
        current_statement__ = 65;
        if (stan::math::logical_eq(prior_reff, 0)) {
          current_statement__ = 63;
          stan::model::assign(v,
            stan::math::multiply(
              stan::model::rvalue(sigma_v, "sigma_v",
                stan::model::index_uni(1)), v_raw), "assigning variable v");
        } else {
          current_statement__ = 62;
          if (stan::math::logical_eq(prior_reff, 1)) {
            current_statement__ = 60;
            stan::model::assign(v,
              stan::math::multiply(
                stan::model::rvalue(sigma_v, "sigma_v",
                  stan::model::index_uni(1)), v_raw), "assigning variable v");
          } else {
            current_statement__ = 59;
            if (stan::math::logical_eq(prior_reff, 2)) {
              current_statement__ = 57;
              stan::model::assign(v,
                stan::math::elt_multiply(
                  stan::math::multiply(stan::math::sqrt(psi_d),
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(1))), v_raw),
                "assigning variable v");
            }
          }
        }
      }
      current_statement__ = 122;
      if ((stan::math::primitive_value(stan::math::logical_eq(spatial_err, 0))
          &&
          stan::math::primitive_value(stan::math::logical_eq(temporal_err, 0)))) {
        current_statement__ = 117;
        stan::model::assign(reffs, v, "assigning variable reffs");
        current_statement__ = 120;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 118;
          stan::model::assign(reffs_oos, 0, "assigning variable reffs_oos",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 78;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 1))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 0)))) {
          current_statement__ = 70;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 68;
            stan::model::assign(s,
              ((stan::model::rvalue(sigma_s, "sigma_s",
                  stan::model::index_uni(1)) *
              stan::model::rvalue(s_raw, "s_raw", stan::model::index_uni(i)))
              /
              stan::model::rvalue(scales_ICAR, "scales_ICAR",
                stan::model::index_uni(i))), "assigning variable s",
              stan::model::index_uni(
                stan::model::rvalue(indices_spat, "indices_spat",
                  stan::model::index_uni(i))));
          }
          current_statement__ = 73;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 71;
            stan::model::assign(reffs,
              (stan::model::rvalue(v, "v", stan::model::index_uni(i)) +
              stan::model::rvalue(s, "s",
                stan::model::index_uni(
                  stan::model::rvalue(indices_is, "indices_is",
                    stan::model::index_uni(i))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 76;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 74;
            stan::model::assign(reffs_oos,
              stan::model::rvalue(s, "s",
                stan::model::index_uni(
                  stan::model::rvalue(indices_oos, "indices_oos",
                    stan::model::index_uni(i)))),
              "assigning variable reffs_oos", stan::model::index_uni(i));
          }
        }
        current_statement__ = 95;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 0))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 1)))) {
          current_statement__ = 79;
          stan::model::assign(t,
            stan::math::divide(
              stan::math::multiply(
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)), t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 82;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 80;
            stan::model::assign(reffs,
              (stan::model::rvalue(v, "v",
                 stan::model::index_uni(
                   stan::model::rvalue(indices_temp, "indices_temp",
                     stan::model::index_uni(
                       stan::model::rvalue(indices_is, "indices_is",
                         stan::model::index_uni(i))),
                     stan::model::index_uni(1)))) +
              stan::model::rvalue(t, "t",
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(2))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 93;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 85;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 83;
              stan::model::assign(reffs_oos, 0,
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 88;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 2)) {
              current_statement__ = 86;
              stan::model::assign(reffs_oos,
                stan::model::rvalue(v, "v",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1)))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 91;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 3)) {
              current_statement__ = 89;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(v, "v",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
          }
        }
        current_statement__ = 115;
        if ((stan::math::primitive_value(
               stan::math::logical_eq(spatial_err, 1))
            &&
            stan::math::primitive_value(
              stan::math::logical_eq(temporal_err, 1)))) {
          current_statement__ = 96;
          stan::model::assign(t,
            stan::math::divide(
              stan::math::multiply(
                stan::model::rvalue(sigma_t, "sigma_t",
                  stan::model::index_uni(1)), t_raw), scale_factor_RW1),
            "assigning variable t");
          current_statement__ = 99;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 97;
            stan::model::assign(s,
              ((stan::model::rvalue(sigma_s, "sigma_s",
                  stan::model::index_uni(1)) *
              stan::model::rvalue(s_raw, "s_raw",
                stan::model::index_uni(
                  stan::model::rvalue(indices_spat, "indices_spat",
                    stan::model::index_uni(i))))) /
              stan::model::rvalue(scales_ICAR, "scales_ICAR",
                stan::model::index_uni(
                  stan::model::rvalue(indices_spat, "indices_spat",
                    stan::model::index_uni(i))))), "assigning variable s",
              stan::model::index_uni(i));
          }
          current_statement__ = 102;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 100;
            stan::model::assign(reffs,
              (stan::model::rvalue(s, "s",
                 stan::model::index_uni(
                   stan::model::rvalue(indices_temp, "indices_temp",
                     stan::model::index_uni(
                       stan::model::rvalue(indices_is, "indices_is",
                         stan::model::index_uni(i))),
                     stan::model::index_uni(1)))) +
              stan::model::rvalue(t, "t",
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(1))),
                stan::model::index_uni(
                  stan::model::rvalue(indices_temp, "indices_temp",
                    stan::model::index_uni(
                      stan::model::rvalue(indices_is, "indices_is",
                        stan::model::index_uni(i))),
                    stan::model::index_uni(2))))),
              "assigning variable reffs", stan::model::index_uni(i));
          }
          current_statement__ = 113;
          for (int i = 1; i <= M_oos; ++i) {
            current_statement__ = 105;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 1)) {
              current_statement__ = 103;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 108;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 2)) {
              current_statement__ = 106;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
            current_statement__ = 111;
            if (stan::math::logical_eq(
                  stan::model::rvalue(cat_ios, "cat_ios",
                    stan::model::index_uni(i)), 3)) {
              current_statement__ = 109;
              stan::model::assign(reffs_oos,
                (stan::model::rvalue(s, "s",
                   stan::model::index_uni(
                     stan::model::rvalue(indices_temp, "indices_temp",
                       stan::model::index_uni(
                         stan::model::rvalue(indices_oos, "indices_oos",
                           stan::model::index_uni(i))),
                       stan::model::index_uni(1)))) +
                stan::model::rvalue(t, "t",
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(1))),
                  stan::model::index_uni(
                    stan::model::rvalue(indices_temp, "indices_temp",
                      stan::model::index_uni(
                        stan::model::rvalue(indices_oos, "indices_oos",
                          stan::model::index_uni(i))),
                      stan::model::index_uni(2))))),
                "assigning variable reffs_oos", stan::model::index_uni(i));
            }
          }
        }
      }
      current_statement__ = 212;
      if (stan::math::logical_eq(likelihood, 0)) {
        current_statement__ = 210;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 200;
          if (stan::math::logical_eq(intercept, 0)) {
            current_statement__ = 198;
            stan::model::assign(mu,
              stan::math::inv_logit(
                (stan::math::multiply(
                   stan::model::rvalue(X, "X", stan::model::index_uni(i),
                     stan::model::index_omni()), beta) +
                stan::model::rvalue(reffs, "reffs", stan::model::index_uni(i)))),
              "assigning variable mu", stan::model::index_uni(i));
          } else {
            current_statement__ = 196;
            stan::model::assign(mu,
              stan::math::inv_logit(
                ((stan::model::rvalue(beta0, "beta0",
                    stan::model::index_uni(1)) +
                stan::math::multiply(
                  stan::model::rvalue(X, "X", stan::model::index_uni(i),
                    stan::model::index_omni()), beta)) +
                stan::model::rvalue(reffs, "reffs", stan::model::index_uni(i)))),
              "assigning variable mu", stan::model::index_uni(i));
          }
          current_statement__ = 201;
          stan::model::assign(theta,
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
            "assigning variable theta", stan::model::index_uni(i));
          current_statement__ = 208;
          if (stan::math::logical_eq(deff, 0)) {
            current_statement__ = 205;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              / stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              - 1)), "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 206;
            stan::model::assign(a1,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              / stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              - 1)), "assigning variable a1", stan::model::index_uni(i));
          } else {
            current_statement__ = 202;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
              stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
              "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 203;
            stan::model::assign(a1,
              (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
              "assigning variable a1", stan::model::index_uni(i));
          }
        }
      } else {
        current_statement__ = 195;
        if (stan::math::logical_eq(likelihood, 1)) {
          current_statement__ = 193;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 183;
            if (stan::math::logical_eq(intercept, 0)) {
              current_statement__ = 181;
              stan::model::assign(lambda2,
                stan::math::inv_logit(
                  (stan::math::multiply(
                     stan::model::rvalue(X, "X", stan::model::index_uni(i),
                       stan::model::index_omni()), beta) +
                  stan::model::rvalue(reffs, "reffs",
                    stan::model::index_uni(i)))),
                "assigning variable lambda2", stan::model::index_uni(i));
            } else {
              current_statement__ = 179;
              stan::model::assign(lambda2,
                stan::math::inv_logit(
                  ((stan::model::rvalue(beta0, "beta0",
                      stan::model::index_uni(1)) +
                  stan::math::multiply(
                    stan::model::rvalue(X, "X", stan::model::index_uni(i),
                      stan::model::index_omni()), beta)) +
                  stan::model::rvalue(reffs, "reffs",
                    stan::model::index_uni(i)))),
                "assigning variable lambda2", stan::model::index_uni(i));
            }
            current_statement__ = 184;
            stan::model::assign(lambda1,
              (stan::model::rvalue(lambda2, "lambda2",
                 stan::model::index_uni(i)) +
              (stan::model::rvalue(w, "w", stan::model::index_uni(1)) *
              stan::math::fmin(((1 -
                stan::model::rvalue(lambda2, "lambda2",
                  stan::model::index_uni(i))) /
                stan::model::rvalue(p, "p", stan::model::index_uni(1))),
                stan::math::sqrt(
                  (stan::model::rvalue(disp, "disp",
                     stan::model::index_uni(i)) /
                  (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                  (1 -
                  stan::model::rvalue(p, "p", stan::model::index_uni(1))))))))),
              "assigning variable lambda1", stan::model::index_uni(i));
            current_statement__ = 185;
            stan::model::assign(mu,
              ((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
              stan::model::rvalue(lambda1, "lambda1",
                stan::model::index_uni(i))) + ((1 -
              stan::model::rvalue(p, "p", stan::model::index_uni(1))) *
              stan::model::rvalue(lambda2, "lambda2",
                stan::model::index_uni(i)))), "assigning variable mu",
              stan::model::index_uni(i));
            current_statement__ = 186;
            stan::model::assign(theta,
              stan::model::rvalue(mu, "mu", stan::model::index_uni(i)),
              "assigning variable theta", stan::model::index_uni(i));
            current_statement__ = 187;
            stan::model::assign(phi,
              (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
              (1 - stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
              - stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
              / (stan::model::rvalue(disp, "disp", stan::model::index_uni(i))
              - (((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
              (1 - stan::model::rvalue(p, "p", stan::model::index_uni(1)))) *
              stan::math::pow(
                stan::model::rvalue(w, "w", stan::model::index_uni(1)), 2)) *
              stan::math::pow(
                stan::math::fmin(((1 -
                  stan::model::rvalue(lambda2, "lambda2",
                    stan::model::index_uni(i))) /
                  stan::model::rvalue(p, "p", stan::model::index_uni(1))),
                  stan::math::sqrt(
                    (stan::model::rvalue(disp, "disp",
                       stan::model::index_uni(i)) /
                    (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                    (1 -
                    stan::model::rvalue(p, "p", stan::model::index_uni(1))))))),
                2)))), "assigning variable phi", stan::model::index_uni(i));
            current_statement__ = 188;
            stan::model::assign(b1, ((1 -
              stan::model::rvalue(lambda2, "lambda2",
                stan::model::index_uni(i))) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable b1", stan::model::index_uni(i));
            current_statement__ = 189;
            stan::model::assign(a1,
              (stan::model::rvalue(lambda2, "lambda2",
                 stan::model::index_uni(i)) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable a1", stan::model::index_uni(i));
            current_statement__ = 190;
            stan::model::assign(b2, ((1 -
              stan::model::rvalue(lambda1, "lambda1",
                stan::model::index_uni(i))) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable b2", stan::model::index_uni(i));
            current_statement__ = 191;
            stan::model::assign(a2,
              (stan::model::rvalue(lambda1, "lambda1",
                 stan::model::index_uni(i)) *
              stan::model::rvalue(phi, "phi", stan::model::index_uni(i))),
              "assigning variable a2", stan::model::index_uni(i));
          }
        } else {
          current_statement__ = 178;
          if (stan::math::logical_eq(likelihood, 2)) {
            current_statement__ = 176;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 144;
              if (stan::math::logical_eq(intercept, 0)) {
                current_statement__ = 142;
                stan::model::assign(mu,
                  stan::math::inv_logit(
                    (stan::math::multiply(
                       stan::model::rvalue(X, "X", stan::model::index_uni(i),
                         stan::model::index_omni()), beta) +
                    stan::model::rvalue(reffs, "reffs",
                      stan::model::index_uni(i)))), "assigning variable mu",
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 140;
                stan::model::assign(mu,
                  stan::math::inv_logit(
                    ((stan::model::rvalue(beta0, "beta0",
                        stan::model::index_uni(1)) +
                    stan::math::multiply(
                      stan::model::rvalue(X, "X", stan::model::index_uni(i),
                        stan::model::index_omni()), beta)) +
                    stan::model::rvalue(reffs, "reffs",
                      stan::model::index_uni(i)))), "assigning variable mu",
                  stan::model::index_uni(i));
              }
              current_statement__ = 151;
              if (stan::math::logical_neq(inflation, 1)) {
                current_statement__ = 149;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 147;
                  stan::model::assign(p0,
                    stan::math::inv_logit(
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0)),
                    "assigning variable p0", stan::model::index_uni(i));
                } else {
                  current_statement__ = 145;
                  stan::model::assign(p0,
                    stan::math::inv_logit(
                      (stan::model::rvalue(gamma0_p0, "gamma0_p0",
                         stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0))),
                    "assigning variable p0", stan::model::index_uni(i));
                }
              }
              current_statement__ = 158;
              if (stan::math::logical_neq(inflation, 0)) {
                current_statement__ = 156;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 154;
                  stan::model::assign(p1,
                    stan::math::inv_logit(
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p1)),
                    "assigning variable p1", stan::model::index_uni(i));
                } else {
                  current_statement__ = 152;
                  stan::model::assign(p1,
                    stan::math::inv_logit(
                      (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                         stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p1))),
                    "assigning variable p1", stan::model::index_uni(i));
                }
              }
              current_statement__ = 167;
              if (stan::math::logical_eq(inflation, 0)) {
                current_statement__ = 165;
                stan::model::assign(theta, ((1 -
                  stan::model::rvalue(p0, "p0", stan::model::index_uni(i))) *
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
                  "assigning variable theta", stan::model::index_uni(i));
              } else {
                current_statement__ = 164;
                if (stan::math::logical_eq(inflation, 1)) {
                  current_statement__ = 162;
                  stan::model::assign(theta, (((1 -
                    stan::model::rvalue(p1, "p1", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    +
                    stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                    "assigning variable theta", stan::model::index_uni(i));
                } else {
                  current_statement__ = 161;
                  if (stan::math::logical_eq(inflation, 2)) {
                    current_statement__ = 159;
                    stan::model::assign(theta, ((((1 -
                      stan::model::rvalue(p0, "p0", stan::model::index_uni(i)))
                      -
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i)))
                      *
                      stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                      +
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                      "assigning variable theta", stan::model::index_uni(i));
                  }
                }
              }
              current_statement__ = 174;
              if (stan::math::logical_eq(deff, 0)) {
                current_statement__ = 171;
                stan::model::assign(b1, ((1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
                  (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                  * (1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                  /
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
                  - 1)), "assigning variable b1", stan::model::index_uni(i));
                current_statement__ = 172;
                stan::model::assign(a1,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  (((stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                  * (1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                  /
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i)))
                  - 1)), "assigning variable a1", stan::model::index_uni(i));
              } else {
                current_statement__ = 168;
                stan::model::assign(b1, ((1 -
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(i))) *
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
                  "assigning variable b1", stan::model::index_uni(i));
                current_statement__ = 169;
                stan::model::assign(a1,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  stan::model::rvalue(disp, "disp", stan::model::index_uni(i))),
                  "assigning variable a1", stan::model::index_uni(i));
              }
            }
          } else {
            current_statement__ = 139;
            if (stan::math::logical_eq(likelihood, 3)) {
              current_statement__ = 137;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 127;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 125;
                  stan::model::assign(mu,
                    stan::math::inv_logit(
                      (stan::math::multiply(
                         stan::model::rvalue(X, "X",
                           stan::model::index_uni(i),
                           stan::model::index_omni()), beta) +
                      stan::model::rvalue(reffs, "reffs",
                        stan::model::index_uni(i)))),
                    "assigning variable mu", stan::model::index_uni(i));
                } else {
                  current_statement__ = 123;
                  stan::model::assign(mu,
                    stan::math::inv_logit(
                      ((stan::model::rvalue(beta0, "beta0",
                          stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X, "X",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), beta)) +
                      stan::model::rvalue(reffs, "reffs",
                        stan::model::index_uni(i)))),
                    "assigning variable mu", stan::model::index_uni(i));
                }
                current_statement__ = 128;
                stan::model::assign(theta,
                  (stan::model::rvalue(mu, "mu", stan::model::index_uni(i)) *
                  (1 -
                  stan::math::pow((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
                    stan::model::rvalue(m_d, "m_d", stan::model::index_uni(i))))),
                  "assigning variable theta", stan::model::index_uni(i));
                current_statement__ = 135;
                if (stan::math::logical_eq(deff, 0)) {
                  current_statement__ = 132;
                  stan::model::assign(b1, ((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    *
                    (((stan::model::rvalue(mu, "mu",
                         stan::model::index_uni(i)) * (1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                    /
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))) - 1)),
                    "assigning variable b1", stan::model::index_uni(i));
                  current_statement__ = 133;
                  stan::model::assign(a1,
                    (stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                    *
                    (((stan::model::rvalue(mu, "mu",
                         stan::model::index_uni(i)) * (1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))
                    /
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))) - 1)),
                    "assigning variable a1", stan::model::index_uni(i));
                } else {
                  current_statement__ = 129;
                  stan::model::assign(b1, ((1 -
                    stan::model::rvalue(mu, "mu", stan::model::index_uni(i)))
                    *
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))), "assigning variable b1",
                    stan::model::index_uni(i));
                  current_statement__ = 130;
                  stan::model::assign(a1,
                    (stan::model::rvalue(mu, "mu", stan::model::index_uni(i))
                    *
                    stan::model::rvalue(disp, "disp",
                      stan::model::index_uni(i))), "assigning variable a1",
                    stan::model::index_uni(i));
                }
              }
            }
          }
        }
      }
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "c2", c2, 0);
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "lambda_tilde",
        lambda_tilde, 0);
      current_statement__ = 25;
      stan::math::check_greater_or_equal(function__, "theta", theta, 0);
      current_statement__ = 25;
      stan::math::check_less_or_equal(function__, "theta", theta, 1);
      current_statement__ = 26;
      stan::math::check_greater_or_equal(function__, "b1", b1, 0);
      current_statement__ = 27;
      stan::math::check_greater_or_equal(function__, "a1", a1, 0);
      current_statement__ = 28;
      stan::math::check_greater_or_equal(function__, "mu", mu, 0);
      current_statement__ = 28;
      stan::math::check_less_or_equal(function__, "mu", mu, 1);
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "phi", phi, 0);
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "lambda1", lambda1, 0);
      current_statement__ = 30;
      stan::math::check_less_or_equal(function__, "lambda1", lambda1, 1);
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "lambda2", lambda2, 0);
      current_statement__ = 31;
      stan::math::check_less_or_equal(function__, "lambda2", lambda2, 1);
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "b2", b2, 0);
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "a2", a2, 0);
      current_statement__ = 34;
      stan::math::check_greater_or_equal(function__, "p0", p0, 0);
      current_statement__ = 34;
      stan::math::check_less_or_equal(function__, "p0", p0, 1);
      current_statement__ = 35;
      stan::math::check_greater_or_equal(function__, "p1", p1, 0);
      current_statement__ = 35;
      stan::math::check_less_or_equal(function__, "p1", p1, 1);
      if (emit_transformed_parameters__) {
        out__.write(beta);
        out__.write(tau);
        out__.write(c2);
        out__.write(lambda_tilde);
        out__.write(theta);
        out__.write(b1);
        out__.write(a1);
        out__.write(mu);
        out__.write(phi);
        out__.write(lambda1);
        out__.write(lambda2);
        out__.write(b2);
        out__.write(a2);
        out__.write(p0);
        out__.write(p1);
        out__.write(v);
        out__.write(s);
        out__.write(t);
        out__.write(reffs);
        out__.write(reffs_oos);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_rep =
        Eigen::Matrix<double,-1,1>::Constant(M_is,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> psi_OOS =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> v_oos =
        std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      int label_mixt = std::numeric_limits<int>::min();
      Eigen::Matrix<double,-1,1> probs =
        Eigen::Matrix<double,-1,1>::Constant(probs_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta_oos =
        Eigen::Matrix<double,-1,1>::Constant(theta_oos_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 377;
      if (stan::math::logical_eq(likelihood, 0)) {
        current_statement__ = 354;
        for (int i = 1; i <= M_is; ++i) {
          current_statement__ = 351;
          stan::model::assign(log_lik,
            stan::math::beta_lpdf<false>(
              stan::model::rvalue(y, "y", stan::model::index_uni(i)),
              stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
              stan::model::rvalue(b1, "b1", stan::model::index_uni(i))),
            "assigning variable log_lik", stan::model::index_uni(i));
          current_statement__ = 352;
          stan::model::assign(y_rep,
            stan::math::beta_rng(
              stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
              stan::model::rvalue(b1, "b1", stan::model::index_uni(i)),
              base_rng__), "assigning variable y_rep",
            stan::model::index_uni(i));
        }
        current_statement__ = 375;
        for (int i = 1; i <= M_oos; ++i) {
          current_statement__ = 368;
          if (stan::math::logical_eq(temporal_err, 0)) {
            current_statement__ = 366;
            if (stan::math::logical_eq(prior_reff, 0)) {
              current_statement__ = 364;
              stan::model::assign(v_oos,
                stan::math::normal_rng(0,
                  stan::model::rvalue(sigma_v, "sigma_v",
                    stan::model::index_uni(1)), base_rng__),
                "assigning variable v_oos", stan::model::index_uni(1));
            } else {
              current_statement__ = 363;
              if (stan::math::logical_eq(prior_reff, 1)) {
                current_statement__ = 361;
                stan::model::assign(v_oos,
                  stan::math::student_t_rng(
                    stan::model::rvalue(nu, "nu", stan::model::index_uni(1)),
                    0,
                    stan::model::rvalue(sigma_v, "sigma_v",
                      stan::model::index_uni(1)), base_rng__),
                  "assigning variable v_oos", stan::model::index_uni(1));
              } else {
                current_statement__ = 360;
                if (stan::math::logical_eq(prior_reff, 2)) {
                  current_statement__ = 357;
                  stan::model::assign(psi_OOS,
                    stan::math::gamma_rng(0.5, 1, base_rng__),
                    "assigning variable psi_OOS", stan::model::index_uni(1));
                  current_statement__ = 358;
                  stan::model::assign(v_oos,
                    stan::math::normal_rng(0,
                      (stan::math::sqrt(
                         stan::model::rvalue(psi_OOS, "psi_OOS",
                           stan::model::index_uni(1))) *
                      stan::model::rvalue(lambda, "lambda",
                        stan::model::index_uni(1))), base_rng__),
                    "assigning variable v_oos", stan::model::index_uni(1));
                }
              }
            }
          } else {
            current_statement__ = 355;
            stan::model::assign(v_oos, 0, "assigning variable v_oos",
              stan::model::index_uni(1));
          }
          current_statement__ = 373;
          if (stan::math::logical_eq(intercept, 0)) {
            current_statement__ = 371;
            stan::model::assign(theta_oos,
              stan::math::inv_logit(
                ((stan::math::multiply(
                    stan::model::rvalue(X_oos, "X_oos",
                      stan::model::index_uni(i), stan::model::index_omni()),
                    beta) +
                stan::model::rvalue(reffs_oos, "reffs_oos",
                  stan::model::index_uni(i))) +
                stan::model::rvalue(v_oos, "v_oos", stan::model::index_uni(1)))),
              "assigning variable theta_oos", stan::model::index_uni(i));
          } else {
            current_statement__ = 369;
            stan::model::assign(theta_oos,
              stan::math::inv_logit(
                (((stan::model::rvalue(beta0, "beta0",
                     stan::model::index_uni(1)) +
                stan::math::multiply(
                  stan::model::rvalue(X_oos, "X_oos",
                    stan::model::index_uni(i), stan::model::index_omni()),
                  beta)) +
                stan::model::rvalue(reffs_oos, "reffs_oos",
                  stan::model::index_uni(i))) +
                stan::model::rvalue(v_oos, "v_oos", stan::model::index_uni(1)))),
              "assigning variable theta_oos", stan::model::index_uni(i));
          }
        }
      } else {
        current_statement__ = 350;
        if (stan::math::logical_eq(likelihood, 1)) {
          current_statement__ = 348;
          for (int i = 1; i <= M_is; ++i) {
            current_statement__ = 340;
            stan::model::assign(log_lik,
              stan::math::log_mix(
                stan::model::rvalue(p, "p", stan::model::index_uni(1)),
                stan::math::beta_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(a2, "a2", stan::model::index_uni(i)),
                  stan::model::rvalue(b2, "b2", stan::model::index_uni(i))),
                stan::math::beta_lpdf<false>(
                  stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                  stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                  stan::model::rvalue(b1, "b1", stan::model::index_uni(i)))),
              "assigning variable log_lik", stan::model::index_uni(i));
            current_statement__ = 341;
            label_mixt = stan::math::bernoulli_rng(
                           stan::model::rvalue(p, "p",
                             stan::model::index_uni(1)), base_rng__);
            current_statement__ = 346;
            if (stan::math::logical_eq(label_mixt, 1)) {
              current_statement__ = 344;
              stan::model::assign(y_rep,
                stan::math::beta_rng(
                  stan::model::rvalue(a2, "a2", stan::model::index_uni(i)),
                  stan::model::rvalue(b2, "b2", stan::model::index_uni(i)),
                  base_rng__), "assigning variable y_rep",
                stan::model::index_uni(i));
            } else {
              current_statement__ = 342;
              stan::model::assign(y_rep,
                stan::math::beta_rng(
                  stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                  stan::model::rvalue(b1, "b1", stan::model::index_uni(i)),
                  base_rng__), "assigning variable y_rep",
                stan::model::index_uni(i));
            }
          }
        } else {
          current_statement__ = 339;
          if (stan::math::logical_eq(likelihood, 2)) {
            current_statement__ = 288;
            for (int i = 1; i <= M_oos; ++i) {
              current_statement__ = 265;
              if (stan::math::logical_eq(temporal_err, 0)) {
                current_statement__ = 263;
                if (stan::math::logical_eq(prior_reff, 0)) {
                  current_statement__ = 261;
                  stan::model::assign(v_oos,
                    stan::math::normal_rng(0,
                      stan::model::rvalue(sigma_v, "sigma_v",
                        stan::model::index_uni(1)), base_rng__),
                    "assigning variable v_oos", stan::model::index_uni(1));
                } else {
                  current_statement__ = 260;
                  if (stan::math::logical_eq(prior_reff, 1)) {
                    current_statement__ = 258;
                    stan::model::assign(v_oos,
                      stan::math::student_t_rng(
                        stan::model::rvalue(nu, "nu",
                          stan::model::index_uni(1)), 0,
                        stan::model::rvalue(sigma_v, "sigma_v",
                          stan::model::index_uni(1)), base_rng__),
                      "assigning variable v_oos", stan::model::index_uni(1));
                  } else {
                    current_statement__ = 257;
                    if (stan::math::logical_eq(prior_reff, 2)) {
                      current_statement__ = 254;
                      stan::model::assign(psi_OOS,
                        stan::math::gamma_rng(0.5, 1, base_rng__),
                        "assigning variable psi_OOS",
                        stan::model::index_uni(1));
                      current_statement__ = 255;
                      stan::model::assign(v_oos,
                        stan::math::normal_rng(0,
                          (stan::math::sqrt(
                             stan::model::rvalue(psi_OOS, "psi_OOS",
                               stan::model::index_uni(1))) *
                          stan::model::rvalue(lambda, "lambda",
                            stan::model::index_uni(1))), base_rng__),
                        "assigning variable v_oos", stan::model::index_uni(1));
                    }
                  }
                }
              } else {
                current_statement__ = 252;
                stan::model::assign(v_oos, 0, "assigning variable v_oos",
                  stan::model::index_uni(1));
              }
              current_statement__ = 286;
              if (stan::math::logical_eq(inflation, 0)) {
                current_statement__ = 284;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 282;
                  stan::model::assign(theta_oos, ((1 -
                    stan::math::inv_logit(
                      stan::math::multiply(
                        stan::model::rvalue(X_oos, "X_oos",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0))) *
                    stan::math::inv_logit(
                      ((stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), beta) +
                      stan::model::rvalue(reffs_oos, "reffs_oos",
                        stan::model::index_uni(i))) +
                      stan::model::rvalue(v_oos, "v_oos",
                        stan::model::index_uni(1))))),
                    "assigning variable theta_oos", stan::model::index_uni(i));
                } else {
                  current_statement__ = 280;
                  stan::model::assign(theta_oos, ((1 -
                    stan::math::inv_logit(
                      (stan::model::rvalue(gamma0_p0, "gamma0_p0",
                         stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X_oos, "X_oos",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), gamma_p0)))) *
                    stan::math::inv_logit(
                      (((stan::model::rvalue(beta0, "beta0",
                           stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X_oos, "X_oos",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), beta)) +
                      stan::model::rvalue(reffs_oos, "reffs_oos",
                        stan::model::index_uni(i))) +
                      stan::model::rvalue(v_oos, "v_oos",
                        stan::model::index_uni(1))))),
                    "assigning variable theta_oos", stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 279;
                if (stan::math::logical_eq(inflation, 1)) {
                  current_statement__ = 277;
                  if (stan::math::logical_eq(intercept, 0)) {
                    current_statement__ = 275;
                    stan::model::assign(theta_oos, (((1 -
                      stan::math::inv_logit(
                        stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), gamma_p1))) *
                      stan::math::inv_logit(
                        ((stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), beta) +
                        stan::model::rvalue(reffs_oos, "reffs_oos",
                          stan::model::index_uni(i))) +
                        stan::model::rvalue(v_oos, "v_oos",
                          stan::model::index_uni(1))))) +
                      stan::math::inv_logit(
                        stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), gamma_p1))),
                      "assigning variable theta_oos",
                      stan::model::index_uni(i));
                  } else {
                    current_statement__ = 273;
                    stan::model::assign(theta_oos, (((1 -
                      stan::math::inv_logit(
                        (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                           stan::model::index_uni(1)) +
                        stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), gamma_p1)))) *
                      stan::math::inv_logit(
                        (((stan::model::rvalue(beta0, "beta0",
                             stan::model::index_uni(1)) +
                        stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), beta)) +
                        stan::model::rvalue(reffs_oos, "reffs_oos",
                          stan::model::index_uni(i))) +
                        stan::model::rvalue(v_oos, "v_oos",
                          stan::model::index_uni(1))))) +
                      stan::math::inv_logit(
                        (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                           stan::model::index_uni(1)) +
                        stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), gamma_p1)))),
                      "assigning variable theta_oos",
                      stan::model::index_uni(i));
                  }
                } else {
                  current_statement__ = 272;
                  if (stan::math::logical_eq(inflation, 2)) {
                    current_statement__ = 270;
                    if (stan::math::logical_eq(intercept, 0)) {
                      current_statement__ = 268;
                      stan::model::assign(theta_oos, ((((1 -
                        stan::math::inv_logit(
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p0))) -
                        stan::math::inv_logit(
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p1))) *
                        stan::math::inv_logit(
                          ((stan::math::multiply(
                              stan::model::rvalue(X_oos, "X_oos",
                                stan::model::index_uni(i),
                                stan::model::index_omni()), beta) +
                          stan::model::rvalue(reffs_oos, "reffs_oos",
                            stan::model::index_uni(i))) +
                          stan::model::rvalue(v_oos, "v_oos",
                            stan::model::index_uni(1))))) +
                        stan::math::inv_logit(
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p1))),
                        "assigning variable theta_oos",
                        stan::model::index_uni(i));
                    } else {
                      current_statement__ = 266;
                      stan::model::assign(theta_oos, ((((1 -
                        stan::math::inv_logit(
                          (stan::model::rvalue(gamma0_p0, "gamma0_p0",
                             stan::model::index_uni(1)) +
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p0)))) -
                        stan::math::inv_logit(
                          (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                             stan::model::index_uni(1)) +
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p1)))) *
                        stan::math::inv_logit(
                          (((stan::model::rvalue(beta0, "beta0",
                               stan::model::index_uni(1)) +
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), beta)) +
                          stan::model::rvalue(reffs_oos, "reffs_oos",
                            stan::model::index_uni(i))) +
                          stan::model::rvalue(v_oos, "v_oos",
                            stan::model::index_uni(1))))) +
                        stan::math::inv_logit(
                          (stan::model::rvalue(gamma0_p1, "gamma0_p1",
                             stan::model::index_uni(1)) +
                          stan::math::multiply(
                            stan::model::rvalue(X_oos, "X_oos",
                              stan::model::index_uni(i),
                              stan::model::index_omni()), gamma_p1)))),
                        "assigning variable theta_oos",
                        stan::model::index_uni(i));
                    }
                  }
                }
              }
            }
            current_statement__ = 337;
            for (int i = 1; i <= M_is; ++i) {
              current_statement__ = 304;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                       0))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_neq(inflation, 1)))) {
                current_statement__ = 302;
                stan::model::assign(log_lik,
                  stan::math::log(
                    stan::model::rvalue(p0, "p0", stan::model::index_uni(i))),
                  "assigning variable log_lik", stan::model::index_uni(i));
              } else {
                current_statement__ = 301;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(y, "y",
                           stan::model::index_uni(i)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_neq(inflation, 0)))) {
                  current_statement__ = 299;
                  stan::model::assign(log_lik,
                    stan::math::log(
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                    "assigning variable log_lik", stan::model::index_uni(i));
                } else {
                  current_statement__ = 297;
                  if (stan::math::logical_eq(inflation, 0)) {
                    current_statement__ = 295;
                    stan::model::assign(log_lik,
                      (stan::math::log((1 -
                         stan::model::rvalue(p0, "p0",
                           stan::model::index_uni(i)))) +
                      stan::math::beta_lpdf<false>(
                        stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                        stan::model::rvalue(a1, "a1",
                          stan::model::index_uni(i)),
                        stan::model::rvalue(b1, "b1",
                          stan::model::index_uni(i)))),
                      "assigning variable log_lik", stan::model::index_uni(i));
                  } else {
                    current_statement__ = 294;
                    if (stan::math::logical_eq(inflation, 1)) {
                      current_statement__ = 292;
                      stan::model::assign(log_lik,
                        (stan::math::log((1 -
                           stan::model::rvalue(p1, "p1",
                             stan::model::index_uni(i)))) +
                        stan::math::beta_lpdf<false>(
                          stan::model::rvalue(y, "y",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(a1, "a1",
                            stan::model::index_uni(i)),
                          stan::model::rvalue(b1, "b1",
                            stan::model::index_uni(i)))),
                        "assigning variable log_lik",
                        stan::model::index_uni(i));
                    } else {
                      current_statement__ = 291;
                      if (stan::math::logical_eq(inflation, 2)) {
                        current_statement__ = 289;
                        stan::model::assign(log_lik,
                          (stan::math::log(((1 -
                             stan::model::rvalue(p0, "p0",
                               stan::model::index_uni(i))) -
                             stan::model::rvalue(p1, "p1",
                               stan::model::index_uni(i)))) +
                          stan::math::beta_lpdf<false>(
                            stan::model::rvalue(y, "y",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(a1, "a1",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(b1, "b1",
                              stan::model::index_uni(i)))),
                          "assigning variable log_lik",
                          stan::model::index_uni(i));
                      }
                    }
                  }
                }
              }
              current_statement__ = 335;
              if (stan::math::logical_eq(inflation, 0)) {
                current_statement__ = 328;
                label_mixt = stan::math::bernoulli_rng(
                               stan::model::rvalue(p0, "p0",
                                 stan::model::index_uni(i)), base_rng__);
                current_statement__ = 333;
                if (stan::math::logical_eq(label_mixt, 1)) {
                  current_statement__ = 331;
                  stan::model::assign(y_rep, 0, "assigning variable y_rep",
                    stan::model::index_uni(i));
                } else {
                  current_statement__ = 329;
                  stan::model::assign(y_rep,
                    stan::math::beta_rng(
                      stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                      stan::model::rvalue(b1, "b1", stan::model::index_uni(i)),
                      base_rng__), "assigning variable y_rep",
                    stan::model::index_uni(i));
                }
              } else {
                current_statement__ = 327;
                if (stan::math::logical_eq(inflation, 1)) {
                  current_statement__ = 320;
                  label_mixt = stan::math::bernoulli_rng(
                                 stan::model::rvalue(p1, "p1",
                                   stan::model::index_uni(i)), base_rng__);
                  current_statement__ = 325;
                  if (stan::math::logical_eq(label_mixt, 1)) {
                    current_statement__ = 323;
                    stan::model::assign(y_rep, 1, "assigning variable y_rep",
                      stan::model::index_uni(i));
                  } else {
                    current_statement__ = 321;
                    stan::model::assign(y_rep,
                      stan::math::beta_rng(
                        stan::model::rvalue(a1, "a1",
                          stan::model::index_uni(i)),
                        stan::model::rvalue(b1, "b1",
                          stan::model::index_uni(i)), base_rng__),
                      "assigning variable y_rep", stan::model::index_uni(i));
                  }
                } else {
                  current_statement__ = 319;
                  if (stan::math::logical_eq(inflation, 2)) {
                    current_statement__ = 305;
                    stan::model::assign(probs,
                      stan::model::rvalue(p0, "p0", stan::model::index_uni(i)),
                      "assigning variable probs", stan::model::index_uni(1));
                    current_statement__ = 306;
                    stan::model::assign(probs, ((1 -
                      stan::model::rvalue(p0, "p0", stan::model::index_uni(i)))
                      -
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i))),
                      "assigning variable probs", stan::model::index_uni(2));
                    current_statement__ = 307;
                    stan::model::assign(probs,
                      stan::model::rvalue(p1, "p1", stan::model::index_uni(i)),
                      "assigning variable probs", stan::model::index_uni(3));
                    current_statement__ = 308;
                    label_mixt = stan::math::categorical_rng(probs,
                                   base_rng__);
                    current_statement__ = 317;
                    if (stan::math::logical_eq(label_mixt, 1)) {
                      current_statement__ = 315;
                      stan::model::assign(y_rep, 0,
                        "assigning variable y_rep", stan::model::index_uni(i));
                    } else {
                      current_statement__ = 314;
                      if (stan::math::logical_eq(label_mixt, 2)) {
                        current_statement__ = 312;
                        stan::model::assign(y_rep,
                          stan::math::beta_rng(
                            stan::model::rvalue(a1, "a1",
                              stan::model::index_uni(i)),
                            stan::model::rvalue(b1, "b1",
                              stan::model::index_uni(i)), base_rng__),
                          "assigning variable y_rep",
                          stan::model::index_uni(i));
                      } else {
                        current_statement__ = 311;
                        if (stan::math::logical_eq(label_mixt, 3)) {
                          current_statement__ = 309;
                          stan::model::assign(y_rep, 1,
                            "assigning variable y_rep",
                            stan::model::index_uni(i));
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            current_statement__ = 251;
            if (stan::math::logical_eq(likelihood, 3)) {
              current_statement__ = 233;
              for (int i = 1; i <= M_oos; ++i) {
                current_statement__ = 226;
                if (stan::math::logical_eq(temporal_err, 0)) {
                  current_statement__ = 224;
                  if (stan::math::logical_eq(prior_reff, 0)) {
                    current_statement__ = 222;
                    stan::model::assign(v_oos,
                      stan::math::normal_rng(0,
                        stan::model::rvalue(sigma_v, "sigma_v",
                          stan::model::index_uni(1)), base_rng__),
                      "assigning variable v_oos", stan::model::index_uni(1));
                  } else {
                    current_statement__ = 221;
                    if (stan::math::logical_eq(prior_reff, 1)) {
                      current_statement__ = 219;
                      stan::model::assign(v_oos,
                        stan::math::student_t_rng(
                          stan::model::rvalue(nu, "nu",
                            stan::model::index_uni(1)), 0,
                          stan::model::rvalue(sigma_v, "sigma_v",
                            stan::model::index_uni(1)), base_rng__),
                        "assigning variable v_oos", stan::model::index_uni(1));
                    } else {
                      current_statement__ = 218;
                      if (stan::math::logical_eq(prior_reff, 2)) {
                        current_statement__ = 215;
                        stan::model::assign(psi_OOS,
                          stan::math::gamma_rng(0.5, 1, base_rng__),
                          "assigning variable psi_OOS",
                          stan::model::index_uni(1));
                        current_statement__ = 216;
                        stan::model::assign(v_oos,
                          stan::math::normal_rng(0,
                            (stan::math::sqrt(
                               stan::model::rvalue(psi_OOS, "psi_OOS",
                                 stan::model::index_uni(1))) *
                            stan::model::rvalue(lambda, "lambda",
                              stan::model::index_uni(1))), base_rng__),
                          "assigning variable v_oos",
                          stan::model::index_uni(1));
                      }
                    }
                  }
                } else {
                  current_statement__ = 213;
                  stan::model::assign(v_oos, 0, "assigning variable v_oos",
                    stan::model::index_uni(1));
                }
                current_statement__ = 231;
                if (stan::math::logical_eq(intercept, 0)) {
                  current_statement__ = 229;
                  stan::model::assign(theta_oos,
                    stan::math::inv_logit(
                      ((stan::math::multiply(
                          stan::model::rvalue(X_oos, "X_oos",
                            stan::model::index_uni(i),
                            stan::model::index_omni()), beta) +
                      stan::model::rvalue(reffs_oos, "reffs_oos",
                        stan::model::index_uni(i))) +
                      stan::model::rvalue(v_oos, "v_oos",
                        stan::model::index_uni(1)))),
                    "assigning variable theta_oos", stan::model::index_uni(i));
                } else {
                  current_statement__ = 227;
                  stan::model::assign(theta_oos,
                    stan::math::inv_logit(
                      (((stan::model::rvalue(beta0, "beta0",
                           stan::model::index_uni(1)) +
                      stan::math::multiply(
                        stan::model::rvalue(X_oos, "X_oos",
                          stan::model::index_uni(i),
                          stan::model::index_omni()), beta)) +
                      stan::model::rvalue(reffs_oos, "reffs_oos",
                        stan::model::index_uni(i))) +
                      stan::model::rvalue(v_oos, "v_oos",
                        stan::model::index_uni(1)))),
                    "assigning variable theta_oos", stan::model::index_uni(i));
                }
              }
              current_statement__ = 241;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 238;
                if (stan::math::logical_eq(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      0)) {
                  current_statement__ = 236;
                  stan::model::assign(log_lik,
                    (stan::model::rvalue(m_d, "m_d",
                       stan::model::index_uni(i)) *
                    stan::math::log((1 -
                      stan::model::rvalue(mu, "mu", stan::model::index_uni(i))))),
                    "assigning variable log_lik", stan::model::index_uni(i));
                } else {
                  current_statement__ = 234;
                  stan::model::assign(log_lik,
                    (stan::math::log((1 -
                       stan::math::pow((1 -
                         stan::model::rvalue(mu, "mu",
                           stan::model::index_uni(i))),
                         stan::model::rvalue(m_d, "m_d",
                           stan::model::index_uni(i))))) +
                    stan::math::beta_lpdf<false>(
                      stan::model::rvalue(y, "y", stan::model::index_uni(i)),
                      stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                      stan::model::rvalue(b1, "b1", stan::model::index_uni(i)))),
                    "assigning variable log_lik", stan::model::index_uni(i));
                }
                current_statement__ = 239;
                stan::model::assign(y_rep,
                  stan::math::beta_rng(
                    stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                    stan::model::rvalue(b1, "b1", stan::model::index_uni(i)),
                    base_rng__), "assigning variable y_rep",
                  stan::model::index_uni(i));
              }
              current_statement__ = 249;
              for (int i = 1; i <= M_is; ++i) {
                current_statement__ = 242;
                label_mixt = stan::math::bernoulli_rng(
                               stan::math::pow((1 -
                                 stan::model::rvalue(mu, "mu",
                                   stan::model::index_uni(i))),
                                 stan::model::rvalue(m_d, "m_d",
                                   stan::model::index_uni(i))), base_rng__);
                current_statement__ = 247;
                if (stan::math::logical_eq(label_mixt, 1)) {
                  current_statement__ = 245;
                  stan::model::assign(y_rep, 0.0, "assigning variable y_rep",
                    stan::model::index_uni(i));
                } else {
                  current_statement__ = 243;
                  stan::model::assign(y_rep,
                    stan::math::beta_rng(
                      stan::model::rvalue(a1, "a1", stan::model::index_uni(i)),
                      stan::model::rvalue(b1, "b1", stan::model::index_uni(i)),
                      base_rng__), "assigning variable y_rep",
                    stan::model::index_uni(i));
                }
              }
            }
          }
        }
      }
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "theta_oos", theta_oos,
        0);
      current_statement__ = 47;
      stan::math::check_less_or_equal(function__, "theta_oos", theta_oos, 1);
      out__.write(log_lik);
      out__.write(y_rep);
      out__.write(psi_OOS);
      out__.write(v_oos);
      out__.write(label_mixt);
      out__.write(probs);
      out__.write(theta_oos);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(beta0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(beta0_1dim__),
        "assigning variable beta0");
      out__.write(beta0);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z_beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(P),
        "assigning variable z_beta");
      out__.write(z_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_HS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_HS_1dim__,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(lambda_HS,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_HS_1dim__),
        "assigning variable lambda_HS");
      out__.write_free_lb(0, lambda_HS);
      Eigen::Matrix<local_scalar_t__,-1,1> z_c2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_c2_1dim__,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(z_c2,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(z_c2_1dim__),
        "assigning variable z_c2");
      out__.write_free_lb(0, z_c2);
      Eigen::Matrix<local_scalar_t__,-1,1> z_tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(z_tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(z_tau_1dim__),
        "assigning variable z_tau");
      out__.write_free_lb(0, z_tau);
      Eigen::Matrix<local_scalar_t__,-1,1> v_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(length_v, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(v_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(length_v),
        "assigning variable v_raw");
      out__.write(v_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_v_1dim__,
          DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sigma_v,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sigma_v_1dim__),
        "assigning variable sigma_v");
      out__.write_free_lb(0, sigma_v);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_1dim__,
          DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(nu,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(nu_1dim__),
        "assigning variable nu");
      out__.write_free_lb(0, nu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_d_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(psi_d,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(psi_d_1dim__),
        "assigning variable psi_d");
      out__.write_free_lb(0, psi_d);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lambda,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(lambda_1dim__),
        "assigning variable lambda");
      out__.write_free_lb(0, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> s_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_raw_1dim__,
          DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(s_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(s_raw_1dim__),
        "assigning variable s_raw");
      out__.write(s_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_s_1dim__,
          DUMMY_VAR__);
      current_statement__ = 12;
      stan::model::assign(sigma_s,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sigma_s_1dim__),
        "assigning variable sigma_s");
      out__.write_free_lb(0, sigma_s);
      Eigen::Matrix<local_scalar_t__,-1,-1> t_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(t_raw_1dim__,
          t_raw_2dim__, DUMMY_VAR__);
      current_statement__ = 13;
      stan::model::assign(t_raw,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(t_raw_1dim__,
          t_raw_2dim__), "assigning variable t_raw");
      out__.write(t_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_t_1dim__,
          DUMMY_VAR__);
      current_statement__ = 14;
      stan::model::assign(sigma_t,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(sigma_t_1dim__),
        "assigning variable sigma_t");
      out__.write_free_lb(0, sigma_t);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(w_1dim__, DUMMY_VAR__);
      current_statement__ = 15;
      stan::model::assign(w,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(w_1dim__),
        "assigning variable w");
      out__.write_free_lub(0.001, 0.999, w);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      current_statement__ = 16;
      stan::model::assign(p,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p_1dim__),
        "assigning variable p");
      out__.write_free_lub(0.001, 0.999, p);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 17;
      stan::model::assign(gamma_p0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p0_1dim__),
        "assigning variable gamma_p0");
      out__.write(gamma_p0);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 18;
      stan::model::assign(gamma_p1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(gamma_p1_1dim__),
        "assigning variable gamma_p1");
      out__.write(gamma_p1);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p0_1dim__,
          DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(gamma0_p0,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p0_1dim__),
        "assigning variable gamma0_p0");
      out__.write(gamma0_p0);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p1_1dim__,
          DUMMY_VAR__);
      current_statement__ = 20;
      stan::model::assign(gamma0_p1,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(gamma0_p1_1dim__),
        "assigning variable gamma0_p1");
      out__.write(gamma0_p1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "beta0", "double",
        std::vector<size_t>{static_cast<size_t>(beta0_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "z_beta", "double",
        std::vector<size_t>{static_cast<size_t>(P)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lambda_HS",
        "double", std::vector<size_t>{static_cast<size_t>(lambda_HS_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "z_c2", "double",
        std::vector<size_t>{static_cast<size_t>(z_c2_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "z_tau", "double",
        std::vector<size_t>{static_cast<size_t>(z_tau_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "v_raw", "double",
        std::vector<size_t>{static_cast<size_t>(length_v)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_v",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_v_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "nu", "double",
        std::vector<size_t>{static_cast<size_t>(nu_1dim__)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "psi_d", "double",
        std::vector<size_t>{static_cast<size_t>(psi_d_1dim__)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization", "lambda", "double",
        std::vector<size_t>{static_cast<size_t>(lambda_1dim__)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization", "s_raw", "double",
        std::vector<size_t>{static_cast<size_t>(s_raw_1dim__)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization", "sigma_s",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_s_1dim__)});
      current_statement__ = 13;
      context__.validate_dims("parameter initialization", "t_raw", "double",
        std::vector<size_t>{static_cast<size_t>(t_raw_1dim__),
          static_cast<size_t>(t_raw_2dim__)});
      current_statement__ = 14;
      context__.validate_dims("parameter initialization", "sigma_t",
        "double", std::vector<size_t>{static_cast<size_t>(sigma_t_1dim__)});
      current_statement__ = 15;
      context__.validate_dims("parameter initialization", "w", "double",
        std::vector<size_t>{static_cast<size_t>(w_1dim__)});
      current_statement__ = 16;
      context__.validate_dims("parameter initialization", "p", "double",
        std::vector<size_t>{static_cast<size_t>(p_1dim__)});
      current_statement__ = 17;
      context__.validate_dims("parameter initialization", "gamma_p0",
        "double", std::vector<size_t>{static_cast<size_t>(gamma_p0_1dim__)});
      current_statement__ = 18;
      context__.validate_dims("parameter initialization", "gamma_p1",
        "double", std::vector<size_t>{static_cast<size_t>(gamma_p1_1dim__)});
      current_statement__ = 19;
      context__.validate_dims("parameter initialization", "gamma0_p0",
        "double", std::vector<size_t>{static_cast<size_t>(gamma0_p0_1dim__)});
      current_statement__ = 20;
      context__.validate_dims("parameter initialization", "gamma0_p1",
        "double", std::vector<size_t>{static_cast<size_t>(gamma0_p1_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> beta0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(beta0_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta0_flat__;
        current_statement__ = 1;
        beta0_flat__ = context__.vals_r("beta0");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(beta0, beta0_flat__[(pos__ - 1)],
            "assigning variable beta0", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta0);
      Eigen::Matrix<local_scalar_t__,-1,1> z_beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(P, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_beta_flat__;
        current_statement__ = 2;
        z_beta_flat__ = context__.vals_r("z_beta");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(z_beta, z_beta_flat__[(pos__ - 1)],
            "assigning variable z_beta", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(z_beta);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_HS =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_HS_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_HS_flat__;
        current_statement__ = 3;
        lambda_HS_flat__ = context__.vals_r("lambda_HS");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(lambda_HS, lambda_HS_flat__[(pos__ - 1)],
            "assigning variable lambda_HS", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, lambda_HS);
      Eigen::Matrix<local_scalar_t__,-1,1> z_c2 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_c2_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_c2_flat__;
        current_statement__ = 4;
        z_c2_flat__ = context__.vals_r("z_c2");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(z_c2, z_c2_flat__[(pos__ - 1)],
            "assigning variable z_c2", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, z_c2);
      Eigen::Matrix<local_scalar_t__,-1,1> z_tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(z_tau_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> z_tau_flat__;
        current_statement__ = 5;
        z_tau_flat__ = context__.vals_r("z_tau");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(z_tau, z_tau_flat__[(pos__ - 1)],
            "assigning variable z_tau", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, z_tau);
      Eigen::Matrix<local_scalar_t__,-1,1> v_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(length_v, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> v_raw_flat__;
        current_statement__ = 6;
        v_raw_flat__ = context__.vals_r("v_raw");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(v_raw, v_raw_flat__[(pos__ - 1)],
            "assigning variable v_raw", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(v_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_v =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_v_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_v_flat__;
        current_statement__ = 7;
        sigma_v_flat__ = context__.vals_r("sigma_v");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(sigma_v, sigma_v_flat__[(pos__ - 1)],
            "assigning variable sigma_v", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_v);
      Eigen::Matrix<local_scalar_t__,-1,1> nu =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(nu_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> nu_flat__;
        current_statement__ = 8;
        nu_flat__ = context__.vals_r("nu");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(nu, nu_flat__[(pos__ - 1)],
            "assigning variable nu", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, nu);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_d =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(psi_d_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_d_flat__;
        current_statement__ = 9;
        psi_d_flat__ = context__.vals_r("psi_d");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(psi_d, psi_d_flat__[(pos__ - 1)],
            "assigning variable psi_d", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, psi_d);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lambda_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 10;
        lambda_flat__ = context__.vals_r("lambda");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(lambda, lambda_flat__[(pos__ - 1)],
            "assigning variable lambda", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, lambda);
      Eigen::Matrix<local_scalar_t__,-1,1> s_raw =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(s_raw_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> s_raw_flat__;
        current_statement__ = 11;
        s_raw_flat__ = context__.vals_r("s_raw");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(s_raw, s_raw_flat__[(pos__ - 1)],
            "assigning variable s_raw", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(s_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_s =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_s_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_s_flat__;
        current_statement__ = 12;
        sigma_s_flat__ = context__.vals_r("sigma_s");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
          current_statement__ = 12;
          stan::model::assign(sigma_s, sigma_s_flat__[(pos__ - 1)],
            "assigning variable sigma_s", stan::model::index_uni(sym1__));
          current_statement__ = 12;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_s);
      Eigen::Matrix<local_scalar_t__,-1,-1> t_raw =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(t_raw_1dim__,
          t_raw_2dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> t_raw_flat__;
        current_statement__ = 13;
        t_raw_flat__ = context__.vals_r("t_raw");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
          current_statement__ = 13;
          for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
            current_statement__ = 13;
            stan::model::assign(t_raw, t_raw_flat__[(pos__ - 1)],
              "assigning variable t_raw", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 13;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(t_raw);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma_t =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(sigma_t_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_t_flat__;
        current_statement__ = 14;
        sigma_t_flat__ = context__.vals_r("sigma_t");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
          current_statement__ = 14;
          stan::model::assign(sigma_t, sigma_t_flat__[(pos__ - 1)],
            "assigning variable sigma_t", stan::model::index_uni(sym1__));
          current_statement__ = 14;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma_t);
      Eigen::Matrix<local_scalar_t__,-1,1> w =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(w_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 15;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 15;
        pos__ = 1;
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
          current_statement__ = 15;
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          current_statement__ = 15;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0.001, 0.999, w);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p_1dim__, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> p_flat__;
        current_statement__ = 16;
        p_flat__ = context__.vals_r("p");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(p, p_flat__[(pos__ - 1)],
            "assigning variable p", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0.001, 0.999, p);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p0_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_p0_flat__;
        current_statement__ = 17;
        gamma_p0_flat__ = context__.vals_r("gamma_p0");
        current_statement__ = 17;
        pos__ = 1;
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
          current_statement__ = 17;
          stan::model::assign(gamma_p0, gamma_p0_flat__[(pos__ - 1)],
            "assigning variable gamma_p0", stan::model::index_uni(sym1__));
          current_statement__ = 17;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma_p0);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma_p1_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_p1_flat__;
        current_statement__ = 18;
        gamma_p1_flat__ = context__.vals_r("gamma_p1");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(gamma_p1, gamma_p1_flat__[(pos__ - 1)],
            "assigning variable gamma_p1", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma_p1);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p0 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p0_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma0_p0_flat__;
        current_statement__ = 19;
        gamma0_p0_flat__ = context__.vals_r("gamma0_p0");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
          current_statement__ = 19;
          stan::model::assign(gamma0_p0, gamma0_p0_flat__[(pos__ - 1)],
            "assigning variable gamma0_p0", stan::model::index_uni(sym1__));
          current_statement__ = 19;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma0_p0);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma0_p1 =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(gamma0_p1_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma0_p1_flat__;
        current_statement__ = 20;
        gamma0_p1_flat__ = context__.vals_r("gamma0_p1");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(gamma0_p1, gamma0_p1_flat__[(pos__ - 1)],
            "assigning variable gamma0_p1", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma0_p1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"beta0", "z_beta", "lambda_HS",
                "z_c2", "z_tau", "v_raw", "sigma_v", "nu", "psi_d", "lambda",
                "s_raw", "sigma_s", "t_raw", "sigma_t", "w", "p", "gamma_p0",
                "gamma_p1", "gamma0_p0", "gamma0_p1"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"beta", "tau", "c2", "lambda_tilde", "theta", "b1", "a1", "mu",
             "phi", "lambda1", "lambda2", "b2", "a2", "p0", "p1", "v", "s",
             "t", "reffs", "reffs_oos"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik", "y_rep", "psi_OOS", "v_oos", "label_mixt", "probs",
             "theta_oos"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    beta0_1dim__)},
                std::vector<size_t>{static_cast<size_t>(P)},
                std::vector<size_t>{static_cast<size_t>(lambda_HS_1dim__)},
                std::vector<size_t>{static_cast<size_t>(z_c2_1dim__)},
                std::vector<size_t>{static_cast<size_t>(z_tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(length_v)},
                std::vector<size_t>{static_cast<size_t>(sigma_v_1dim__)},
                std::vector<size_t>{static_cast<size_t>(nu_1dim__)},
                std::vector<size_t>{static_cast<size_t>(psi_d_1dim__)},
                std::vector<size_t>{static_cast<size_t>(lambda_1dim__)},
                std::vector<size_t>{static_cast<size_t>(s_raw_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_s_1dim__)},
                std::vector<size_t>{static_cast<size_t>(t_raw_1dim__),
                  static_cast<size_t>(t_raw_2dim__)},
                std::vector<size_t>{static_cast<size_t>(sigma_t_1dim__)},
                std::vector<size_t>{static_cast<size_t>(w_1dim__)},
                std::vector<size_t>{static_cast<size_t>(p_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_p0_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma_p1_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma0_p0_1dim__)},
                std::vector<size_t>{static_cast<size_t>(gamma0_p1_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(P)},
             std::vector<size_t>{static_cast<size_t>(tau_1dim__)},
             std::vector<size_t>{static_cast<size_t>(c2_1dim__)},
             std::vector<size_t>{static_cast<size_t>(lambda_tilde_1dim__)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(lambda1_1dim__)},
             std::vector<size_t>{static_cast<size_t>(lambda2_1dim__)},
             std::vector<size_t>{static_cast<size_t>(b2_1dim__)},
             std::vector<size_t>{static_cast<size_t>(a2_1dim__)},
             std::vector<size_t>{static_cast<size_t>(p0_1dim__)},
             std::vector<size_t>{static_cast<size_t>(p1_1dim__)},
             std::vector<size_t>{static_cast<size_t>(length_v)},
             std::vector<size_t>{static_cast<size_t>(s_1dim__)},
             std::vector<size_t>{static_cast<size_t>(t_1dim__),
               static_cast<size_t>(t_2dim__)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(M_oos)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(M_is)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{static_cast<size_t>(1)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(probs_1dim__)},
             std::vector<size_t>{static_cast<size_t>(theta_oos_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_HS" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_c2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
      param_names__.emplace_back(std::string() + "v_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_d" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "s_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_s" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "t_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_t" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_p0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_p1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma0_p0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma0_p1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "c2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "b1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "a1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "b2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "a2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "p0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "p1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        param_names__.emplace_back(std::string() + "v" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= t_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "t" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "reffs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "reffs_oos" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_OOS" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_oos" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "label_mixt");
      for (int sym1__ = 1; sym1__ <= probs_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_oos" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= beta0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_HS_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_HS" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_c2_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_c2" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
      param_names__.emplace_back(std::string() + "v_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_v_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_v" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= nu_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "nu" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= psi_d_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "psi_d" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= lambda_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= s_raw_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "s_raw" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sigma_s_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_s" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= t_raw_2dim__; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= t_raw_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "t_raw" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= sigma_t_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_t" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= w_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "w" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= p_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "p" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_p0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_p0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma_p1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma_p1" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma0_p0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma0_p0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gamma0_p1_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma0_p1" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= P; ++sym1__) {
        param_names__.emplace_back(std::string() + "beta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= c2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "c2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "b1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "a1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "phi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lambda2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= b2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "b2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= a2_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "a2" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= p0_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "p0" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= p1_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "p1" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= length_v; ++sym1__) {
        param_names__.emplace_back(std::string() + "v" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= s_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "s" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= t_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= t_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "t" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "reffs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_oos; ++sym1__) {
        param_names__.emplace_back(std::string() + "reffs_oos" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M_is; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "psi_OOS" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        param_names__.emplace_back(std::string() + "v_oos" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "label_mixt");
      for (int sym1__ = 1; sym1__ <= probs_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= theta_oos_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta_oos" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"lambda_HS\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_HS_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_c2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_c2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"v_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(length_v) + "},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nu_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"psi_d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_d_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"s_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_s_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"t_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(t_raw_1dim__) + ",\"cols\":" + std::to_string(t_raw_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_t_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(w_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma_p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_p0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma_p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_p1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma0_p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma0_p0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma0_p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma0_p1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_tilde_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(a2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p0_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(length_v) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(t_1dim__) + ",\"cols\":" + std::to_string(t_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs_oos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_oos) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"generated_quantities\"},{\"name\":\"psi_OOS\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"v_oos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"label_mixt\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(probs_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_oos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_oos_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"beta0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(beta0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"parameters\"},{\"name\":\"lambda_HS\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_HS_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_c2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_c2_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"z_tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"v_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(length_v) + "},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_v_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(nu_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"psi_d\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(psi_d_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"s_raw\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_raw_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_s_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"t_raw\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(t_raw_1dim__) + ",\"cols\":" + std::to_string(t_raw_2dim__) + "},\"block\":\"parameters\"},{\"name\":\"sigma_t\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(sigma_t_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"w\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(w_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma_p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_p0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma_p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma_p1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma0_p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma0_p0_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"gamma0_p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(gamma0_p1_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(P) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tau_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"c2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(c2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_tilde\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda_tilde_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(phi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lambda2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lambda2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(b2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"a2\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(a2_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p0_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p1\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p1_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"v\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(length_v) + "},\"block\":\"transformed_parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(s_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"t\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(t_1dim__) + ",\"cols\":" + std::to_string(t_2dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"transformed_parameters\"},{\"name\":\"reffs_oos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_oos) + "},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M_is) + "},\"block\":\"generated_quantities\"},{\"name\":\"psi_OOS\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"v_oos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(1) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"label_mixt\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(probs_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"theta_oos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(theta_oos_1dim__) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((((((beta0_1dim__ + P) +
      lambda_HS_1dim__) + z_c2_1dim__) + z_tau_1dim__) + length_v) +
      sigma_v_1dim__) + nu_1dim__) + psi_d_1dim__) + lambda_1dim__) +
      s_raw_1dim__) + sigma_s_1dim__) + (t_raw_1dim__ * t_raw_2dim__)) +
      sigma_t_1dim__) + w_1dim__) + p_1dim__) + gamma_p0_1dim__) +
      gamma_p1_1dim__) + gamma0_p0_1dim__) + gamma0_p1_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((P + tau_1dim__) + c2_1dim__) + lambda_tilde_1dim__)
      + M_is) + M_is) + M_is) + M_is) + phi_1dim__) + lambda1_1dim__) +
      lambda2_1dim__) + b2_1dim__) + a2_1dim__) + p0_1dim__) + p1_1dim__) +
      length_v) + s_1dim__) + (t_1dim__ * t_2dim__)) + M_is) + M_oos));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((M_is
      + M_is) + 1) + 1) + 1) + probs_1dim__) + theta_oos_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((((((((((beta0_1dim__ + P) +
      lambda_HS_1dim__) + z_c2_1dim__) + z_tau_1dim__) + length_v) +
      sigma_v_1dim__) + nu_1dim__) + psi_d_1dim__) + lambda_1dim__) +
      s_raw_1dim__) + sigma_s_1dim__) + (t_raw_1dim__ * t_raw_2dim__)) +
      sigma_t_1dim__) + w_1dim__) + p_1dim__) + gamma_p0_1dim__) +
      gamma_p1_1dim__) + gamma0_p0_1dim__) + gamma0_p1_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((((((((P + tau_1dim__) + c2_1dim__) + lambda_tilde_1dim__)
      + M_is) + M_is) + M_is) + M_is) + phi_1dim__) + lambda1_1dim__) +
      lambda2_1dim__) + b2_1dim__) + a2_1dim__) + p0_1dim__) + p1_1dim__) +
      length_v) + s_1dim__) + (t_1dim__ * t_2dim__)) + M_is) + M_oos));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((M_is
      + M_is) + 1) + 1) + 1) + probs_1dim__) + theta_oos_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_global_namespace::model_global;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_global_namespace::profiles__;
}
#endif
#endif
